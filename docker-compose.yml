services:
  backend:
    container_name: django
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    entrypoint: "/entrypoint.sh"
#    command: python manage.py runserver 0.0.0.0:8000
#    command: uvicorn config.asgi:application --host 0.0.0.0 --port 8000 --log-level info
    command: gunicorn config.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

    restart: unless-stopped
    volumes:
#      - ./backend/src:/app/
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_INSTANCE_ADDRESS=minio:9000
      - SERVER_BACKEND_IP_ADDRESS=176.108.248.247
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/

  celery_worker:
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    command: celery -A config.celery_app worker --loglevel=info
    depends_on:
      - rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - DATABASE_URL=${DATABASE_URL}

  celery_beat:
    build:
      context: .
      dockerfile: ./docker/django/Dockerfile
    command: celery -A config.celery_app beat --loglevel=info
    depends_on:
      - rabbitmq
      - celery_worker
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - DATABASE_URL=${DATABASE_URL}

  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"      # API MinIO
      - "9001:9001"      # Консоль управления
#    environment:
    env_file:
      - .env
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: nginx_server
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
#      - ./frontend/build:/usr/share/nginx/html:ro
      - static_volume:/static:ro  # Монтируем собранную статику Django
    depends_on:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"

volumes:
  redis_data:
  minio_data:
  pg_data:
  static_volume: