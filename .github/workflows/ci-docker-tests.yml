name: CI Docker Django тесты

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout кода
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Создание .env файла
        run: |
          cat <<EOF > .env
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_USER=${{ secrets.REDIS_USER }}
          REDIS_USER_PASSWORD=${{ secrets.REDIS_USER_PASSWORD }}
          REDIS_INSTANCE_IP_ADDRESS=${{ secrets.REDIS_INSTANCE_IP_ADDRESS }}
          REDIS_INSTANCE_PORT=${{ secrets.REDIS_INSTANCE_PORT }}
          REDIS_URL=${{ secrets.REDIS_URL }}
    
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
    
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          MINIO_INSTANCE_ADDRESS=${{ secrets.MINIO_INSTANCE_ADDRESS }}
    
          SERVER_BACKEND_IP_ADDRESS=${{ secrets.SERVER_BACKEND_IP_ADDRESS }}
          EOF

      - name: Build и запуск контейнеров
        run: docker compose -f docker-compose-ci.yml up -d --build

      - name: Ожидание готовности Postgres
        run: |
          for i in {1..10}; do
            docker compose -f docker-compose-ci.yml exec postgres pg_isready -U ${POSTGRES_USER} && break || sleep 5;
          done

      - name: Ожидание готовности Redis
        run: |
          for i in {1..10}; do
            docker compose -f docker-compose-ci.yml exec redis_container redis-cli -a ${REDIS_PASSWORD} ping && break || sleep 5;
          done

      - name: Подготовка к миграции
        run: docker compose -f docker-compose-ci.yml exec backend python manage.py makemigrations users clients company_structure staffing  medical_activity registry chat

      - name: Применение миграций
        run: docker compose -f docker-compose-ci.yml exec backend python manage.py migrate

      - name: Запуск тестов
        run: docker compose -f docker-compose-ci.yml run --rm backend python /app/manage.py test api apps --parallel

      - name: Остановка контейнеров
        run: docker compose -f docker-compose-ci.yml down -v


  deploy:
      name: Deploy to Server
      needs: test
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Deploy and Build on Server
          uses: appleboy/ssh-action@v0.1.8
          with:
            host: ${{ secrets.SERVER_HOST }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.SERVER_SSH_KEY }}
            passphrase: ${{ secrets.SERVER_SSH_KEY_PASSPHRASE }}
            port: ${{ secrets.SERVER_SSH_PORT }}
            script: |
              cd /home/shiro/project-med/
              # Обновляем код на сервере
              git pull origin master
              # Создаем или обновляем файл .env
              cat <<EOF > .env
              REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
              REDIS_USER=${{ secrets.REDIS_USER }}
              REDIS_USER_PASSWORD=${{ secrets.REDIS_USER_PASSWORD }}
              REDIS_INSTANCE_IP_ADDRESS=${{ secrets.REDIS_INSTANCE_IP_ADDRESS }}
              REDIS_INSTANCE_PORT=${{ secrets.REDIS_INSTANCE_PORT }}
              REDIS_URL=${{ secrets.REDIS_URL }}
              
              POSTGRES_USER=${{ secrets.POSTGRES_USER }}
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              POSTGRES_DB=${{ secrets.POSTGRES_DB }}
              DATABASE_URL=${{ secrets.DATABASE_URL }}
              
              MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
              MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
              MINIO_INSTANCE_ADDRESS=${{ secrets.MINIO_INSTANCE_ADDRESS }}
              
              SERVER_BACKEND_IP_ADDRESS=${{ secrets.SERVER_BACKEND_IP_ADDRESS }}
              GIGACHAT_API_KEY=${{ secrets.GIGACHAT_API_KEY }}
              EOF
              # Останавливаем текущие контейнеры (если запущены)
              docker compose -f docker-compose.yml down
              # Собираем и запускаем контейнеры с обновленным кодом и настройками
              docker compose -f docker-compose.yml up -d --build
