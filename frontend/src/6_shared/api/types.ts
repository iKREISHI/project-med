// @ts-nocheck
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v0/ai-recommendation/doctor-appointment/ai-response/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v0_ai_recommendation_doctor_appointment_ai_response_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/ai-recommendation/patient-condition/ai-response/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v0_ai_recommendation_patient_condition_ai_response_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/appointments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение списка приемов с пагинацией
         * @description Возвращает список приемов к врачу с поддержкой пагинации и фильтрацией по диапазону дат. Если переданы query-параметры 'start_date' и 'end_date' в формате YYYY-MM-DD, то будут возвращаться только те приемы, у которых appointment_date попадает в указанный диапазон.
         */
        get: operations["v0_appointments_list"];
        put?: never;
        /**
         * Создание нового приема
         * @description API для работы с приемами к врачу с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка приемов с пагинацией
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - retrieve: получение приема по id
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - create: создание нового приема
         *         (требуется permission "doctor-appointment.add_doctorappointment"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "doctor-appointment.change_doctorappointment"),
         *       - destroy: удаление приема
         *         (требуется permission "doctor-appointment.delete_doctorappointment").
         */
        post: operations["v0_appointments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/appointments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение приема по id
         * @description API для работы с приемами к врачу с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка приемов с пагинацией
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - retrieve: получение приема по id
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - create: создание нового приема
         *         (требуется permission "doctor-appointment.add_doctorappointment"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "doctor-appointment.change_doctorappointment"),
         *       - destroy: удаление приема
         *         (требуется permission "doctor-appointment.delete_doctorappointment").
         */
        get: operations["v0_appointments_retrieve"];
        /**
         * Полное обновление приема
         * @description API для работы с приемами к врачу с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка приемов с пагинацией
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - retrieve: получение приема по id
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - create: создание нового приема
         *         (требуется permission "doctor-appointment.add_doctorappointment"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "doctor-appointment.change_doctorappointment"),
         *       - destroy: удаление приема
         *         (требуется permission "doctor-appointment.delete_doctorappointment").
         */
        put: operations["v0_appointments_update"];
        post?: never;
        /**
         * Удаление приема
         * @description API для работы с приемами к врачу с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка приемов с пагинацией
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - retrieve: получение приема по id
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - create: создание нового приема
         *         (требуется permission "doctor-appointment.add_doctorappointment"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "doctor-appointment.change_doctorappointment"),
         *       - destroy: удаление приема
         *         (требуется permission "doctor-appointment.delete_doctorappointment").
         */
        delete: operations["v0_appointments_destroy"];
        options?: never;
        head?: never;
        /**
         * Частичное обновление приема
         * @description API для работы с приемами к врачу с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка приемов с пагинацией
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - retrieve: получение приема по id
         *         (требуется permission "doctor-appointment.view_doctorappointment"),
         *       - create: создание нового приема
         *         (требуется permission "doctor-appointment.add_doctorappointment"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "doctor-appointment.change_doctorappointment"),
         *       - destroy: удаление приема
         *         (требуется permission "doctor-appointment.delete_doctorappointment").
         */
        patch: operations["v0_appointments_partial_update"];
        trace?: never;
    };
    "/api/v0/appointments/{id}/sign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Подписание приема врача с электронным подписям пользователем, который является сотрудником. */
        post: operations["sign_doctor_appointment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/booking-appointments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение списка записей на прием
         * @description Возвращает список записей на прием с поддержкой пагинации и фильтрацией по диапазону дат. Если переданы query-параметры 'start_date' и 'end_date' в формате YYYY-MM-DD, то будут возвращаться только те записи, у которых vizit_datetime попадает в указанный диапазон от начала start_date до конца end_date (до 23:59:59).
         */
        get: operations["v0_booking_appointments_list"];
        put?: never;
        /**
         * Создание новой записи на прием
         * @description API для работы с записью на прием с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *       - retrieve: получение по id
         *       - create: создание
         *       - update / partial_update: обновление
         *       - destroy: удаление
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те записи, у которых vizit_datetime попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        post: operations["v0_booking_appointments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/booking-appointments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение записи на прием по id
         * @description API для работы с записью на прием с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *       - retrieve: получение по id
         *       - create: создание
         *       - update / partial_update: обновление
         *       - destroy: удаление
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те записи, у которых vizit_datetime попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        get: operations["v0_booking_appointments_retrieve"];
        /**
         * Полное обновление записи на прием
         * @description API для работы с записью на прием с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *       - retrieve: получение по id
         *       - create: создание
         *       - update / partial_update: обновление
         *       - destroy: удаление
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те записи, у которых vizit_datetime попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        put: operations["v0_booking_appointments_update"];
        post?: never;
        /**
         * Удаление записи на прием
         * @description API для работы с записью на прием с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *       - retrieve: получение по id
         *       - create: создание
         *       - update / partial_update: обновление
         *       - destroy: удаление
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те записи, у которых vizit_datetime попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        delete: operations["v0_booking_appointments_destroy"];
        options?: never;
        head?: never;
        /**
         * Частичное обновление записи на прием
         * @description API для работы с записью на прием с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *       - retrieve: получение по id
         *       - create: создание
         *       - update / partial_update: обновление
         *       - destroy: удаление
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те записи, у которых vizit_datetime попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        patch: operations["v0_booking_appointments_partial_update"];
        trace?: never;
    };
    "/api/v0/chat/rooms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Эндпоинт для работы с чат-комнатами. Список комнат ограничивается только теми,
         *     в которых пользователь является участником. При доступе к деталям также проверяется,
         *     что пользователь входит в список участников. */
        get: operations["v0_chat_rooms_list"];
        put?: never;
        /** @description Эндпоинт для работы с чат-комнатами. Список комнат ограничивается только теми,
         *     в которых пользователь является участником. При доступе к деталям также проверяется,
         *     что пользователь входит в список участников. */
        post: operations["v0_chat_rooms_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/chat/rooms/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Эндпоинт для работы с чат-комнатами. Список комнат ограничивается только теми,
         *     в которых пользователь является участником. При доступе к деталям также проверяется,
         *     что пользователь входит в список участников. */
        get: operations["v0_chat_rooms_retrieve"];
        /** @description Эндпоинт для работы с чат-комнатами. Список комнат ограничивается только теми,
         *     в которых пользователь является участником. При доступе к деталям также проверяется,
         *     что пользователь входит в список участников. */
        put: operations["v0_chat_rooms_update"];
        post?: never;
        /** @description Эндпоинт для работы с чат-комнатами. Список комнат ограничивается только теми,
         *     в которых пользователь является участником. При доступе к деталям также проверяется,
         *     что пользователь входит в список участников. */
        delete: operations["v0_chat_rooms_destroy"];
        options?: never;
        head?: never;
        /** @description Эндпоинт для работы с чат-комнатами. Список комнат ограничивается только теми,
         *     в которых пользователь является участником. При доступе к деталям также проверяется,
         *     что пользователь входит в список участников. */
        patch: operations["v0_chat_rooms_partial_update"];
        trace?: never;
    };
    "/api/v0/chat/rooms/{room_id}/messages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Список сообщений чата
         * @description Возвращает список сообщений в указанной чат-комнате. Доступ разрешён только участникам чата.
         */
        get: operations["v0_chat_rooms_messages_list"];
        put?: never;
        /**
         * Создание сообщения
         * @description Создаёт новое сообщение в чат-комнате. Тип сообщения определяется полем `message_type` (например, 'text', 'image', 'file').
         */
        post: operations["v0_chat_rooms_messages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/chat/rooms/{room_id}/messages/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Удаление сообщения
         * @description Удаляет сообщение, если текущий пользователь является его отправителем.
         */
        delete: operations["v0_chat_rooms_messages_destroy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/contractor/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с контрагентами.
         *
         *     Поддерживаются операции:
         *       - list: получение списка контрагентов (требуется permission "clients.view_contractor"),
         *       - retrieve: получение контрагента по id (требуется permission "clients.view_contractor"),
         *       - create: создание нового контрагента (требуется permission "clients.add_contractor"),
         *       - update/partial_update: обновление контрагента (требуется permission "clients.change_contractor"),
         *       - destroy: удаление контрагента (требуется permission "clients.delete_contractor"). */
        get: operations["v0_contractor_list"];
        put?: never;
        /** @description API для работы с контрагентами.
         *
         *     Поддерживаются операции:
         *       - list: получение списка контрагентов (требуется permission "clients.view_contractor"),
         *       - retrieve: получение контрагента по id (требуется permission "clients.view_contractor"),
         *       - create: создание нового контрагента (требуется permission "clients.add_contractor"),
         *       - update/partial_update: обновление контрагента (требуется permission "clients.change_contractor"),
         *       - destroy: удаление контрагента (требуется permission "clients.delete_contractor"). */
        post: operations["v0_contractor_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/contractor/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с контрагентами.
         *
         *     Поддерживаются операции:
         *       - list: получение списка контрагентов (требуется permission "clients.view_contractor"),
         *       - retrieve: получение контрагента по id (требуется permission "clients.view_contractor"),
         *       - create: создание нового контрагента (требуется permission "clients.add_contractor"),
         *       - update/partial_update: обновление контрагента (требуется permission "clients.change_contractor"),
         *       - destroy: удаление контрагента (требуется permission "clients.delete_contractor"). */
        get: operations["v0_contractor_retrieve"];
        /** @description API для работы с контрагентами.
         *
         *     Поддерживаются операции:
         *       - list: получение списка контрагентов (требуется permission "clients.view_contractor"),
         *       - retrieve: получение контрагента по id (требуется permission "clients.view_contractor"),
         *       - create: создание нового контрагента (требуется permission "clients.add_contractor"),
         *       - update/partial_update: обновление контрагента (требуется permission "clients.change_contractor"),
         *       - destroy: удаление контрагента (требуется permission "clients.delete_contractor"). */
        put: operations["v0_contractor_update"];
        post?: never;
        /** @description API для работы с контрагентами.
         *
         *     Поддерживаются операции:
         *       - list: получение списка контрагентов (требуется permission "clients.view_contractor"),
         *       - retrieve: получение контрагента по id (требуется permission "clients.view_contractor"),
         *       - create: создание нового контрагента (требуется permission "clients.add_contractor"),
         *       - update/partial_update: обновление контрагента (требуется permission "clients.change_contractor"),
         *       - destroy: удаление контрагента (требуется permission "clients.delete_contractor"). */
        delete: operations["v0_contractor_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с контрагентами.
         *
         *     Поддерживаются операции:
         *       - list: получение списка контрагентов (требуется permission "clients.view_contractor"),
         *       - retrieve: получение контрагента по id (требуется permission "clients.view_contractor"),
         *       - create: создание нового контрагента (требуется permission "clients.add_contractor"),
         *       - update/partial_update: обновление контрагента (требуется permission "clients.change_contractor"),
         *       - destroy: удаление контрагента (требуется permission "clients.delete_contractor"). */
        patch: operations["v0_contractor_partial_update"];
        trace?: never;
    };
    "/api/v0/current-user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v0_current_user_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/diagnoses/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v0_diagnoses_list"];
        put?: never;
        post: operations["v0_diagnoses_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/diagnoses/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v0_diagnoses_retrieve"];
        put: operations["v0_diagnoses_update"];
        post?: never;
        delete: operations["v0_diagnoses_destroy"];
        options?: never;
        head?: never;
        patch: operations["v0_diagnoses_partial_update"];
        trace?: never;
    };
    "/api/v0/diagnosis-categories/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v0_diagnosis_categories_list"];
        put?: never;
        post: operations["v0_diagnosis_categories_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/diagnosis-categories/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["v0_diagnosis_categories_retrieve"];
        put: operations["v0_diagnosis_categories_update"];
        post?: never;
        delete: operations["v0_diagnosis_categories_destroy"];
        options?: never;
        head?: never;
        patch: operations["v0_diagnosis_categories_partial_update"];
        trace?: never;
    };
    "/api/v0/employee/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение списка сотрудников
         * @description Возвращает список сотрудников с пагинацией. Поддерживает поиск по: - Началу фамилии
         *     - Началу имени
         *     - Началу отчества
         *     - Номеру телефона
         *     Пример: /api/employees/?search=Иван Петров 7900
         */
        get: operations["v0_employee_list"];
        put?: never;
        /**
         * Создание нового сотрудника
         * @description API для работы с сотрудниками с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка сотрудников с пагинацией (требуется permission "staffing.view_employee"),
         *       - retrieve: получение сотрудника по UUID (требуется permission "staffing.view_employee"),
         *       - create: создание нового сотрудника (требуется permission "staffing.add_employee"),
         *       - update / partial_update: обновление сотрудника (требуется permission "staffing.change_employee"),
         *       - destroy: удаление сотрудника (требуется permission "staffing.delete_employee").
         */
        post: operations["v0_employee_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/employee/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение сотрудника по ID
         * @description API для работы с сотрудниками с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка сотрудников с пагинацией (требуется permission "staffing.view_employee"),
         *       - retrieve: получение сотрудника по UUID (требуется permission "staffing.view_employee"),
         *       - create: создание нового сотрудника (требуется permission "staffing.add_employee"),
         *       - update / partial_update: обновление сотрудника (требуется permission "staffing.change_employee"),
         *       - destroy: удаление сотрудника (требуется permission "staffing.delete_employee").
         */
        get: operations["v0_employee_retrieve"];
        /**
         * Полное обновление данных сотрудника
         * @description API для работы с сотрудниками с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка сотрудников с пагинацией (требуется permission "staffing.view_employee"),
         *       - retrieve: получение сотрудника по UUID (требуется permission "staffing.view_employee"),
         *       - create: создание нового сотрудника (требуется permission "staffing.add_employee"),
         *       - update / partial_update: обновление сотрудника (требуется permission "staffing.change_employee"),
         *       - destroy: удаление сотрудника (требуется permission "staffing.delete_employee").
         */
        put: operations["v0_employee_update"];
        post?: never;
        /**
         * Удаление сотрудника
         * @description API для работы с сотрудниками с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка сотрудников с пагинацией (требуется permission "staffing.view_employee"),
         *       - retrieve: получение сотрудника по UUID (требуется permission "staffing.view_employee"),
         *       - create: создание нового сотрудника (требуется permission "staffing.add_employee"),
         *       - update / partial_update: обновление сотрудника (требуется permission "staffing.change_employee"),
         *       - destroy: удаление сотрудника (требуется permission "staffing.delete_employee").
         */
        delete: operations["v0_employee_destroy"];
        options?: never;
        head?: never;
        /**
         * Частичное обновление данных сотрудника
         * @description API для работы с сотрудниками с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка сотрудников с пагинацией (требуется permission "staffing.view_employee"),
         *       - retrieve: получение сотрудника по UUID (требуется permission "staffing.view_employee"),
         *       - create: создание нового сотрудника (требуется permission "staffing.add_employee"),
         *       - update / partial_update: обновление сотрудника (требуется permission "staffing.change_employee"),
         *       - destroy: удаление сотрудника (требуется permission "staffing.delete_employee").
         */
        patch: operations["v0_employee_partial_update"];
        trace?: never;
    };
    "/api/v0/filial/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Список филиалов
         * @description Получение списка филиалов с пагинацией. Требуется permission 'company_structure.view_filial'.
         */
        get: operations["v0_filial_list"];
        put?: never;
        /**
         * Создание филиала
         * @description Создание нового филиала. Требуется permission 'company_structure.add_filial'.
         */
        post: operations["v0_filial_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/filial-departments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с подразделениями филиала.
         *
         *     Поддерживаемые операции:
         *       - list: получение списка подразделений,
         *       - retrieve: получение подразделения по id,
         *       - create: создание нового подразделения,
         *       - update/partial_update: обновление подразделения,
         *       - destroy: удаление подразделения.
         *
         *     Требуемые разрешения (DjangoModelPermissions):
         *       - Для просмотра: company_structure.view_filialdepartment,
         *       - Для создания: company_structure.add_filialdepartment,
         *       - Для обновления: company_structure.change_filialdepartment,
         *       - Для удаления: company_structure.delete_filialdepartment. */
        get: operations["v0_filial_departments_list"];
        put?: never;
        /** @description API для работы с подразделениями филиала.
         *
         *     Поддерживаемые операции:
         *       - list: получение списка подразделений,
         *       - retrieve: получение подразделения по id,
         *       - create: создание нового подразделения,
         *       - update/partial_update: обновление подразделения,
         *       - destroy: удаление подразделения.
         *
         *     Требуемые разрешения (DjangoModelPermissions):
         *       - Для просмотра: company_structure.view_filialdepartment,
         *       - Для создания: company_structure.add_filialdepartment,
         *       - Для обновления: company_structure.change_filialdepartment,
         *       - Для удаления: company_structure.delete_filialdepartment. */
        post: operations["v0_filial_departments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/filial-departments/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с подразделениями филиала.
         *
         *     Поддерживаемые операции:
         *       - list: получение списка подразделений,
         *       - retrieve: получение подразделения по id,
         *       - create: создание нового подразделения,
         *       - update/partial_update: обновление подразделения,
         *       - destroy: удаление подразделения.
         *
         *     Требуемые разрешения (DjangoModelPermissions):
         *       - Для просмотра: company_structure.view_filialdepartment,
         *       - Для создания: company_structure.add_filialdepartment,
         *       - Для обновления: company_structure.change_filialdepartment,
         *       - Для удаления: company_structure.delete_filialdepartment. */
        get: operations["v0_filial_departments_retrieve"];
        /** @description API для работы с подразделениями филиала.
         *
         *     Поддерживаемые операции:
         *       - list: получение списка подразделений,
         *       - retrieve: получение подразделения по id,
         *       - create: создание нового подразделения,
         *       - update/partial_update: обновление подразделения,
         *       - destroy: удаление подразделения.
         *
         *     Требуемые разрешения (DjangoModelPermissions):
         *       - Для просмотра: company_structure.view_filialdepartment,
         *       - Для создания: company_structure.add_filialdepartment,
         *       - Для обновления: company_structure.change_filialdepartment,
         *       - Для удаления: company_structure.delete_filialdepartment. */
        put: operations["v0_filial_departments_update"];
        post?: never;
        /** @description API для работы с подразделениями филиала.
         *
         *     Поддерживаемые операции:
         *       - list: получение списка подразделений,
         *       - retrieve: получение подразделения по id,
         *       - create: создание нового подразделения,
         *       - update/partial_update: обновление подразделения,
         *       - destroy: удаление подразделения.
         *
         *     Требуемые разрешения (DjangoModelPermissions):
         *       - Для просмотра: company_structure.view_filialdepartment,
         *       - Для создания: company_structure.add_filialdepartment,
         *       - Для обновления: company_structure.change_filialdepartment,
         *       - Для удаления: company_structure.delete_filialdepartment. */
        delete: operations["v0_filial_departments_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с подразделениями филиала.
         *
         *     Поддерживаемые операции:
         *       - list: получение списка подразделений,
         *       - retrieve: получение подразделения по id,
         *       - create: создание нового подразделения,
         *       - update/partial_update: обновление подразделения,
         *       - destroy: удаление подразделения.
         *
         *     Требуемые разрешения (DjangoModelPermissions):
         *       - Для просмотра: company_structure.view_filialdepartment,
         *       - Для создания: company_structure.add_filialdepartment,
         *       - Для обновления: company_structure.change_filialdepartment,
         *       - Для удаления: company_structure.delete_filialdepartment. */
        patch: operations["v0_filial_departments_partial_update"];
        trace?: never;
    };
    "/api/v0/filial/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Детали филиала
         * @description Получение информации о филиале по его id. Требуется permission 'company_structure.view_filial'.
         */
        get: operations["v0_filial_retrieve"];
        /**
         * Обновление филиала
         * @description Обновление данных филиала. Требуется permission 'company_structure.change_filial'.
         */
        put: operations["v0_filial_update"];
        post?: never;
        /**
         * Удаление филиала
         * @description Удаление филиала. Требуется permission 'company_structure.delete_filial'.
         */
        delete: operations["v0_filial_destroy"];
        options?: never;
        head?: never;
        /**
         * Частичное обновление филиала
         * @description Частичное обновление данных филиала. Требуется permission 'company_structure.change_filial'.
         */
        patch: operations["v0_filial_partial_update"];
        trace?: never;
    };
    "/api/v0/hospital-stays/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с госпитализацией пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - retrieve: получение  по id
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - create: создание нового
         *         (требуется permission "hospital_stays.add_hospitalstays"),
         *       - update / partial_update: обновление
         *         (требуется permission "hospital_stays.change_hospitalstays"),
         *       - destroy: удаление
         *         (требуется permission "hospital_stays.delete_hospitalstays"). */
        get: operations["v0_hospital_stays_list"];
        put?: never;
        /** @description API для работы с госпитализацией пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - retrieve: получение  по id
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - create: создание нового
         *         (требуется permission "hospital_stays.add_hospitalstays"),
         *       - update / partial_update: обновление
         *         (требуется permission "hospital_stays.change_hospitalstays"),
         *       - destroy: удаление
         *         (требуется permission "hospital_stays.delete_hospitalstays"). */
        post: operations["v0_hospital_stays_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/hospital-stays/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с госпитализацией пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - retrieve: получение  по id
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - create: создание нового
         *         (требуется permission "hospital_stays.add_hospitalstays"),
         *       - update / partial_update: обновление
         *         (требуется permission "hospital_stays.change_hospitalstays"),
         *       - destroy: удаление
         *         (требуется permission "hospital_stays.delete_hospitalstays"). */
        get: operations["v0_hospital_stays_retrieve"];
        /** @description API для работы с госпитализацией пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - retrieve: получение  по id
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - create: создание нового
         *         (требуется permission "hospital_stays.add_hospitalstays"),
         *       - update / partial_update: обновление
         *         (требуется permission "hospital_stays.change_hospitalstays"),
         *       - destroy: удаление
         *         (требуется permission "hospital_stays.delete_hospitalstays"). */
        put: operations["v0_hospital_stays_update"];
        post?: never;
        /** @description API для работы с госпитализацией пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - retrieve: получение  по id
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - create: создание нового
         *         (требуется permission "hospital_stays.add_hospitalstays"),
         *       - update / partial_update: обновление
         *         (требуется permission "hospital_stays.change_hospitalstays"),
         *       - destroy: удаление
         *         (требуется permission "hospital_stays.delete_hospitalstays"). */
        delete: operations["v0_hospital_stays_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с госпитализацией пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - retrieve: получение  по id
         *         (требуется permission "hospital_stays.view_hospitalstays"),
         *       - create: создание нового
         *         (требуется permission "hospital_stays.add_hospitalstays"),
         *       - update / partial_update: обновление
         *         (требуется permission "hospital_stays.change_hospitalstays"),
         *       - destroy: удаление
         *         (требуется permission "hospital_stays.delete_hospitalstays"). */
        patch: operations["v0_hospital_stays_partial_update"];
        trace?: never;
    };
    "/api/v0/laboratory/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для просмотра лабораторий. */
        get: operations["v0_laboratory_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/laboratory-research/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для просмотра лабораторных исследований. */
        get: operations["v0_laboratory_research_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/laboratory-research-pdf/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для просмотра PDF отчетов лабораторных исследований. */
        get: operations["v0_laboratory_research_pdf_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/laboratory-research-pdf/{research__lab_direction_guid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для просмотра PDF отчетов лабораторных исследований. */
        get: operations["v0_laboratory_research_pdf_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/laboratory-research/{lab_direction_guid}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для просмотра лабораторных исследований. */
        get: operations["v0_laboratory_research_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/laboratory/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для просмотра лабораторий. */
        get: operations["v0_laboratory_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/login/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v0_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/logout/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["v0_logout_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/medical-card/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с медицинскими картами с поддержкой пагинации.
         *
         *     Поддерживаются операции:
         *       - list: получение списка медицинских карт (требуется permission "registry.view_medicalcard"),
         *       - retrieve: получение медицинской карты по ID (требуется permission "registry.view_medicalcard"),
         *       - create: создание новой медицинской карты (требуется permission "registry.add_medicalcard"),
         *       - update/partial_update: обновление медицинской карты (требуется permission "registry.change_medicalcard"),
         *       - destroy: удаление медицинской карты (требуется permission "registry.delete_medicalcard"). */
        get: operations["v0_medical_card_list"];
        put?: never;
        /** @description API для работы с медицинскими картами с поддержкой пагинации.
         *
         *     Поддерживаются операции:
         *       - list: получение списка медицинских карт (требуется permission "registry.view_medicalcard"),
         *       - retrieve: получение медицинской карты по ID (требуется permission "registry.view_medicalcard"),
         *       - create: создание новой медицинской карты (требуется permission "registry.add_medicalcard"),
         *       - update/partial_update: обновление медицинской карты (требуется permission "registry.change_medicalcard"),
         *       - destroy: удаление медицинской карты (требуется permission "registry.delete_medicalcard"). */
        post: operations["v0_medical_card_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/medical-card-types/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для работы с объектами MedicalCardType.
         *     Поддерживает методы: list, create, retrieve, update, partial_update, destroy.
         *     Добавлены права на вход и проверки Django-пермишенов на уровне модели. */
        get: operations["v0_medical_card_types_list"];
        put?: never;
        /** @description ViewSet для работы с объектами MedicalCardType.
         *     Поддерживает методы: list, create, retrieve, update, partial_update, destroy.
         *     Добавлены права на вход и проверки Django-пермишенов на уровне модели. */
        post: operations["v0_medical_card_types_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/medical-card-types/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для работы с объектами MedicalCardType.
         *     Поддерживает методы: list, create, retrieve, update, partial_update, destroy.
         *     Добавлены права на вход и проверки Django-пермишенов на уровне модели. */
        get: operations["v0_medical_card_types_retrieve"];
        /** @description ViewSet для работы с объектами MedicalCardType.
         *     Поддерживает методы: list, create, retrieve, update, partial_update, destroy.
         *     Добавлены права на вход и проверки Django-пермишенов на уровне модели. */
        put: operations["v0_medical_card_types_update"];
        post?: never;
        /** @description ViewSet для работы с объектами MedicalCardType.
         *     Поддерживает методы: list, create, retrieve, update, partial_update, destroy.
         *     Добавлены права на вход и проверки Django-пермишенов на уровне модели. */
        delete: operations["v0_medical_card_types_destroy"];
        options?: never;
        head?: never;
        /** @description ViewSet для работы с объектами MedicalCardType.
         *     Поддерживает методы: list, create, retrieve, update, partial_update, destroy.
         *     Добавлены права на вход и проверки Django-пермишенов на уровне модели. */
        patch: operations["v0_medical_card_types_partial_update"];
        trace?: never;
    };
    "/api/v0/medical-card/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с медицинскими картами с поддержкой пагинации.
         *
         *     Поддерживаются операции:
         *       - list: получение списка медицинских карт (требуется permission "registry.view_medicalcard"),
         *       - retrieve: получение медицинской карты по ID (требуется permission "registry.view_medicalcard"),
         *       - create: создание новой медицинской карты (требуется permission "registry.add_medicalcard"),
         *       - update/partial_update: обновление медицинской карты (требуется permission "registry.change_medicalcard"),
         *       - destroy: удаление медицинской карты (требуется permission "registry.delete_medicalcard"). */
        get: operations["v0_medical_card_retrieve"];
        /** @description API для работы с медицинскими картами с поддержкой пагинации.
         *
         *     Поддерживаются операции:
         *       - list: получение списка медицинских карт (требуется permission "registry.view_medicalcard"),
         *       - retrieve: получение медицинской карты по ID (требуется permission "registry.view_medicalcard"),
         *       - create: создание новой медицинской карты (требуется permission "registry.add_medicalcard"),
         *       - update/partial_update: обновление медицинской карты (требуется permission "registry.change_medicalcard"),
         *       - destroy: удаление медицинской карты (требуется permission "registry.delete_medicalcard"). */
        put: operations["v0_medical_card_update"];
        post?: never;
        /** @description API для работы с медицинскими картами с поддержкой пагинации.
         *
         *     Поддерживаются операции:
         *       - list: получение списка медицинских карт (требуется permission "registry.view_medicalcard"),
         *       - retrieve: получение медицинской карты по ID (требуется permission "registry.view_medicalcard"),
         *       - create: создание новой медицинской карты (требуется permission "registry.add_medicalcard"),
         *       - update/partial_update: обновление медицинской карты (требуется permission "registry.change_medicalcard"),
         *       - destroy: удаление медицинской карты (требуется permission "registry.delete_medicalcard"). */
        delete: operations["v0_medical_card_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с медицинскими картами с поддержкой пагинации.
         *
         *     Поддерживаются операции:
         *       - list: получение списка медицинских карт (требуется permission "registry.view_medicalcard"),
         *       - retrieve: получение медицинской карты по ID (требуется permission "registry.view_medicalcard"),
         *       - create: создание новой медицинской карты (требуется permission "registry.add_medicalcard"),
         *       - update/partial_update: обновление медицинской карты (требуется permission "registry.change_medicalcard"),
         *       - destroy: удаление медицинской карты (требуется permission "registry.delete_medicalcard"). */
        patch: operations["v0_medical_card_partial_update"];
        trace?: never;
    };
    "/api/v0/medical-card/{id}/sign/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Подписание медицинской карты с электронным подписям пользователем, который является сотрудником. */
        post: operations["sign_medical_card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/medical-drug/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для просмотра аптечных препаратов. */
        get: operations["v0_medical_drug_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/medical-drug/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для просмотра аптечных препаратов. */
        get: operations["v0_medical_drug_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/patient/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение списка пациентов
         * @description Возвращает список пациентов с пагинацией. Поддерживает поиск по: - Началу фамилии (регистронезависимый)
         *     - Началу имени
         *     - Началу отчества
         *     - Номеру телефона
         *     Пример: /api/patients/?search=Иван Петров 7900
         */
        get: operations["v0_patient_list"];
        put?: never;
        /**
         * Создание нового пациента
         * @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка пациентов с пагинацией и поиском,
         *       - retrieve: получение пациента по ID,
         *       - create: создание нового пациента,
         *       - update / partial_update: обновление пациента,
         *       - destroy: удаление пациента.
         *
         *     Поиск пациентов осуществляется через параметр `search` в GET-запросе.
         *     Поиск выполняется по:
         *     - началу фамилии (case-insensitive)
         *     - началу имени (case-insensitive)
         *     - началу отчества (case-insensitive)
         *     - названию контрагента (частичное совпадение)
         */
        post: operations["v0_patient_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/patient-conditions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с состоянием пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - retrieve: получение  по id
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - create: создание нового
         *         (требуется permission "patient_condition.add_patientcondition"),
         *       - update / partial_update: обновление
         *         (требуется permission "patient_condition.change_patientcondition"),
         *       - destroy: удаление
         *         (требуется permission "patient_condition.delete_patientcondition"). */
        get: operations["v0_patient_conditions_list"];
        put?: never;
        /** @description API для работы с состоянием пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - retrieve: получение  по id
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - create: создание нового
         *         (требуется permission "patient_condition.add_patientcondition"),
         *       - update / partial_update: обновление
         *         (требуется permission "patient_condition.change_patientcondition"),
         *       - destroy: удаление
         *         (требуется permission "patient_condition.delete_patientcondition"). */
        post: operations["v0_patient_conditions_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/patient-conditions/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с состоянием пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - retrieve: получение  по id
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - create: создание нового
         *         (требуется permission "patient_condition.add_patientcondition"),
         *       - update / partial_update: обновление
         *         (требуется permission "patient_condition.change_patientcondition"),
         *       - destroy: удаление
         *         (требуется permission "patient_condition.delete_patientcondition"). */
        get: operations["v0_patient_conditions_retrieve"];
        /** @description API для работы с состоянием пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - retrieve: получение  по id
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - create: создание нового
         *         (требуется permission "patient_condition.add_patientcondition"),
         *       - update / partial_update: обновление
         *         (требуется permission "patient_condition.change_patientcondition"),
         *       - destroy: удаление
         *         (требуется permission "patient_condition.delete_patientcondition"). */
        put: operations["v0_patient_conditions_update"];
        post?: never;
        /** @description API для работы с состоянием пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - retrieve: получение  по id
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - create: создание нового
         *         (требуется permission "patient_condition.add_patientcondition"),
         *       - update / partial_update: обновление
         *         (требуется permission "patient_condition.change_patientcondition"),
         *       - destroy: удаление
         *         (требуется permission "patient_condition.delete_patientcondition"). */
        delete: operations["v0_patient_conditions_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с состоянием пациента с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - retrieve: получение  по id
         *         (требуется permission "patient_condition.view_patientcondition"),
         *       - create: создание нового
         *         (требуется permission "patient_condition.add_patientcondition"),
         *       - update / partial_update: обновление
         *         (требуется permission "patient_condition.change_patientcondition"),
         *       - destroy: удаление
         *         (требуется permission "patient_condition.delete_patientcondition"). */
        patch: operations["v0_patient_conditions_partial_update"];
        trace?: never;
    };
    "/api/v0/patient/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение пациента по ID
         * @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка пациентов с пагинацией и поиском,
         *       - retrieve: получение пациента по ID,
         *       - create: создание нового пациента,
         *       - update / partial_update: обновление пациента,
         *       - destroy: удаление пациента.
         *
         *     Поиск пациентов осуществляется через параметр `search` в GET-запросе.
         *     Поиск выполняется по:
         *     - началу фамилии (case-insensitive)
         *     - началу имени (case-insensitive)
         *     - началу отчества (case-insensitive)
         *     - названию контрагента (частичное совпадение)
         */
        get: operations["v0_patient_retrieve"];
        /**
         * Полное обновление данных пациента
         * @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка пациентов с пагинацией и поиском,
         *       - retrieve: получение пациента по ID,
         *       - create: создание нового пациента,
         *       - update / partial_update: обновление пациента,
         *       - destroy: удаление пациента.
         *
         *     Поиск пациентов осуществляется через параметр `search` в GET-запросе.
         *     Поиск выполняется по:
         *     - началу фамилии (case-insensitive)
         *     - началу имени (case-insensitive)
         *     - началу отчества (case-insensitive)
         *     - названию контрагента (частичное совпадение)
         */
        put: operations["v0_patient_update"];
        post?: never;
        /**
         * Удаление пациента
         * @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка пациентов с пагинацией и поиском,
         *       - retrieve: получение пациента по ID,
         *       - create: создание нового пациента,
         *       - update / partial_update: обновление пациента,
         *       - destroy: удаление пациента.
         *
         *     Поиск пациентов осуществляется через параметр `search` в GET-запросе.
         *     Поиск выполняется по:
         *     - началу фамилии (case-insensitive)
         *     - началу имени (case-insensitive)
         *     - началу отчества (case-insensitive)
         *     - названию контрагента (частичное совпадение)
         */
        delete: operations["v0_patient_destroy"];
        options?: never;
        head?: never;
        /**
         * Частичное обновление данных пациента
         * @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка пациентов с пагинацией и поиском,
         *       - retrieve: получение пациента по ID,
         *       - create: создание нового пациента,
         *       - update / partial_update: обновление пациента,
         *       - destroy: удаление пациента.
         *
         *     Поиск пациентов осуществляется через параметр `search` в GET-запросе.
         *     Поиск выполняется по:
         *     - началу фамилии (case-insensitive)
         *     - началу имени (case-insensitive)
         *     - началу отчества (case-insensitive)
         *     - названию контрагента (частичное совпадение)
         */
        patch: operations["v0_patient_partial_update"];
        trace?: never;
    };
    "/api/v0/permission-group-current-user/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet для получения прав текущего пользователя и его групп. */
        get: operations["v0_permission_group_current_user_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/position/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение списка должностей
         * @description Возвращает список всех должностей с пагинацией
         */
        get: operations["v0_position_list"];
        put?: never;
        /**
         * Создание новой должности
         * @description API для работы с должностями.
         *
         *     Поддерживаются операции:
         *       - list: получение списка должностей (требуется permission "staffing.view_position"),
         *       - retrieve: получение должности по id (требуется permission "staffing.view_position"),
         *       - create: создание новой должности (требуется permission "staffing.add_position"),
         *       - update/partial_update: обновление должности (требуется permission "staffing.change_position"),
         *       - destroy: удаление должности (требуется permission "staffing.delete_position").
         */
        post: operations["v0_position_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/position/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение должности по ID
         * @description API для работы с должностями.
         *
         *     Поддерживаются операции:
         *       - list: получение списка должностей (требуется permission "staffing.view_position"),
         *       - retrieve: получение должности по id (требуется permission "staffing.view_position"),
         *       - create: создание новой должности (требуется permission "staffing.add_position"),
         *       - update/partial_update: обновление должности (требуется permission "staffing.change_position"),
         *       - destroy: удаление должности (требуется permission "staffing.delete_position").
         */
        get: operations["v0_position_retrieve"];
        /**
         * Полное обновление должности
         * @description API для работы с должностями.
         *
         *     Поддерживаются операции:
         *       - list: получение списка должностей (требуется permission "staffing.view_position"),
         *       - retrieve: получение должности по id (требуется permission "staffing.view_position"),
         *       - create: создание новой должности (требуется permission "staffing.add_position"),
         *       - update/partial_update: обновление должности (требуется permission "staffing.change_position"),
         *       - destroy: удаление должности (требуется permission "staffing.delete_position").
         */
        put: operations["v0_position_update"];
        post?: never;
        /**
         * Удаление должности
         * @description API для работы с должностями.
         *
         *     Поддерживаются операции:
         *       - list: получение списка должностей (требуется permission "staffing.view_position"),
         *       - retrieve: получение должности по id (требуется permission "staffing.view_position"),
         *       - create: создание новой должности (требуется permission "staffing.add_position"),
         *       - update/partial_update: обновление должности (требуется permission "staffing.change_position"),
         *       - destroy: удаление должности (требуется permission "staffing.delete_position").
         */
        delete: operations["v0_position_destroy"];
        options?: never;
        head?: never;
        /**
         * Частичное обновление должности
         * @description API для работы с должностями.
         *
         *     Поддерживаются операции:
         *       - list: получение списка должностей (требуется permission "staffing.view_position"),
         *       - retrieve: получение должности по id (требуется permission "staffing.view_position"),
         *       - create: создание новой должности (требуется permission "staffing.add_position"),
         *       - update/partial_update: обновление должности (требуется permission "staffing.change_position"),
         *       - destroy: удаление должности (требуется permission "staffing.delete_position").
         */
        patch: operations["v0_position_partial_update"];
        trace?: never;
    };
    "/api/v0/reception-templates/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с врачебными шаблонами.
         *     Поддерживаются операции:
         *       - list: получение списка
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - retrieve: получение  по id
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - create: создание
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - destroy: удаление
         *         (требуется permission "reception_template.receptiontemplate"). */
        get: operations["v0_reception_templates_list"];
        put?: never;
        /** @description API для работы с врачебными шаблонами.
         *     Поддерживаются операции:
         *       - list: получение списка
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - retrieve: получение  по id
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - create: создание
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - destroy: удаление
         *         (требуется permission "reception_template.receptiontemplate"). */
        post: operations["v0_reception_templates_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/reception-templates/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с врачебными шаблонами.
         *     Поддерживаются операции:
         *       - list: получение списка
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - retrieve: получение  по id
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - create: создание
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - destroy: удаление
         *         (требуется permission "reception_template.receptiontemplate"). */
        get: operations["v0_reception_templates_retrieve"];
        /** @description API для работы с врачебными шаблонами.
         *     Поддерживаются операции:
         *       - list: получение списка
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - retrieve: получение  по id
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - create: создание
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - destroy: удаление
         *         (требуется permission "reception_template.receptiontemplate"). */
        put: operations["v0_reception_templates_update"];
        post?: never;
        /** @description API для работы с врачебными шаблонами.
         *     Поддерживаются операции:
         *       - list: получение списка
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - retrieve: получение  по id
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - create: создание
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - destroy: удаление
         *         (требуется permission "reception_template.receptiontemplate"). */
        delete: operations["v0_reception_templates_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с врачебными шаблонами.
         *     Поддерживаются операции:
         *       - list: получение списка
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - retrieve: получение  по id
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - create: создание
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "reception_template.receptiontemplate"),
         *       - destroy: удаление
         *         (требуется permission "reception_template.receptiontemplate"). */
        patch: operations["v0_reception_templates_partial_update"];
        trace?: never;
    };
    "/api/v0/reception-time/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с временем приема.
         *
         *     Поддерживаются операции:
         *       - list: получение списка записей времени приема с фильтрацией по подразделению
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - retrieve: получение записи по id
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - create: создание новой записи (автоматическая привязка к текущему сотруднику)
         *         (требуется permission "reception_time.add_receptiontime"),
         *       - update/partial_update: обновление записи
         *         (требуется permission "reception_time.change_receptiontime"),
         *       - destroy: удаление записи
         *         (требуется permission "reception_time.delete_receptiontime"). */
        get: operations["v0_reception_time_list"];
        put?: never;
        /** @description API для работы с временем приема.
         *
         *     Поддерживаются операции:
         *       - list: получение списка записей времени приема с фильтрацией по подразделению
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - retrieve: получение записи по id
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - create: создание новой записи (автоматическая привязка к текущему сотруднику)
         *         (требуется permission "reception_time.add_receptiontime"),
         *       - update/partial_update: обновление записи
         *         (требуется permission "reception_time.change_receptiontime"),
         *       - destroy: удаление записи
         *         (требуется permission "reception_time.delete_receptiontime"). */
        post: operations["v0_reception_time_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/reception-time/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с временем приема.
         *
         *     Поддерживаются операции:
         *       - list: получение списка записей времени приема с фильтрацией по подразделению
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - retrieve: получение записи по id
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - create: создание новой записи (автоматическая привязка к текущему сотруднику)
         *         (требуется permission "reception_time.add_receptiontime"),
         *       - update/partial_update: обновление записи
         *         (требуется permission "reception_time.change_receptiontime"),
         *       - destroy: удаление записи
         *         (требуется permission "reception_time.delete_receptiontime"). */
        get: operations["v0_reception_time_retrieve"];
        put?: never;
        post?: never;
        /** @description API для работы с временем приема.
         *
         *     Поддерживаются операции:
         *       - list: получение списка записей времени приема с фильтрацией по подразделению
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - retrieve: получение записи по id
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - create: создание новой записи (автоматическая привязка к текущему сотруднику)
         *         (требуется permission "reception_time.add_receptiontime"),
         *       - update/partial_update: обновление записи
         *         (требуется permission "reception_time.change_receptiontime"),
         *       - destroy: удаление записи
         *         (требуется permission "reception_time.delete_receptiontime"). */
        delete: operations["v0_reception_time_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с временем приема.
         *
         *     Поддерживаются операции:
         *       - list: получение списка записей времени приема с фильтрацией по подразделению
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - retrieve: получение записи по id
         *         (требуется permission "reception_time.view_receptiontime"),
         *       - create: создание новой записи (автоматическая привязка к текущему сотруднику)
         *         (требуется permission "reception_time.add_receptiontime"),
         *       - update/partial_update: обновление записи
         *         (требуется permission "reception_time.change_receptiontime"),
         *       - destroy: удаление записи
         *         (требуется permission "reception_time.delete_receptiontime"). */
        patch: operations["v0_reception_time_partial_update"];
        trace?: never;
    };
    "/api/v0/register-new-employee/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Регистрация сотрудника
         * @description Регистрация нового сотрудника. Данный эндпоинт доступен только для администратора.
         */
        post: operations["v0_register_new_employee_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/shift/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение списка смен
         * @description Возвращает список врачебных смен с поддержкой пагинации и фильтрацией по диапазону дат. Если переданы query-параметры 'start_date' и 'end_date' в формате YYYY-MM-DD, то будут возвращаться только те смены, у которых start_time попадает в указанный диапазон от начала start_date до конца end_date (до 23:59:59).
         */
        get: operations["v0_shift_list"];
        put?: never;
        /**
         * Создание новой смены
         * @description API для работы с врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift.view_shift"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift.view_shift"),
         *       - create: создание нового приема
         *         (требуется permission "shift.add_shift"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift.change_shift"),
         *       - destroy: удаление приема
         *         (требуется permission "shift.delete_shift").
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те смены, у которых start_time попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        post: operations["v0_shift_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/shift-transfers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с передачей врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - create: создание нового приема
         *         (требуется permission "shift-transfer.add_shifttransfer"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift-transfer.change_shifttransfer"),
         *       - destroy: удаление приема
         *         (требуется permission "shift-transfer.delete_shifttransfer"). */
        get: operations["v0_shift_transfers_list"];
        put?: never;
        /** @description API для работы с передачей врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - create: создание нового приема
         *         (требуется permission "shift-transfer.add_shifttransfer"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift-transfer.change_shifttransfer"),
         *       - destroy: удаление приема
         *         (требуется permission "shift-transfer.delete_shifttransfer"). */
        post: operations["v0_shift_transfers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/shift-transfers/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с передачей врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - create: создание нового приема
         *         (требуется permission "shift-transfer.add_shifttransfer"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift-transfer.change_shifttransfer"),
         *       - destroy: удаление приема
         *         (требуется permission "shift-transfer.delete_shifttransfer"). */
        get: operations["v0_shift_transfers_retrieve"];
        /** @description API для работы с передачей врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - create: создание нового приема
         *         (требуется permission "shift-transfer.add_shifttransfer"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift-transfer.change_shifttransfer"),
         *       - destroy: удаление приема
         *         (требуется permission "shift-transfer.delete_shifttransfer"). */
        put: operations["v0_shift_transfers_update"];
        post?: never;
        /** @description API для работы с передачей врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - create: создание нового приема
         *         (требуется permission "shift-transfer.add_shifttransfer"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift-transfer.change_shifttransfer"),
         *       - destroy: удаление приема
         *         (требуется permission "shift-transfer.delete_shifttransfer"). */
        delete: operations["v0_shift_transfers_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с передачей врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift-transfer.view_shifttransfer"),
         *       - create: создание нового приема
         *         (требуется permission "shift-transfer.add_shifttransfer"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift-transfer.change_shifttransfer"),
         *       - destroy: удаление приема
         *         (требуется permission "shift-transfer.delete_shifttransfer"). */
        patch: operations["v0_shift_transfers_partial_update"];
        trace?: never;
    };
    "/api/v0/shift/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Получение смены по id
         * @description API для работы с врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift.view_shift"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift.view_shift"),
         *       - create: создание нового приема
         *         (требуется permission "shift.add_shift"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift.change_shift"),
         *       - destroy: удаление приема
         *         (требуется permission "shift.delete_shift").
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те смены, у которых start_time попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        get: operations["v0_shift_retrieve"];
        /**
         * Полное обновление смены
         * @description API для работы с врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift.view_shift"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift.view_shift"),
         *       - create: создание нового приема
         *         (требуется permission "shift.add_shift"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift.change_shift"),
         *       - destroy: удаление приема
         *         (требуется permission "shift.delete_shift").
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те смены, у которых start_time попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        put: operations["v0_shift_update"];
        post?: never;
        /**
         * Удаление смены
         * @description API для работы с врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift.view_shift"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift.view_shift"),
         *       - create: создание нового приема
         *         (требуется permission "shift.add_shift"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift.change_shift"),
         *       - destroy: удаление приема
         *         (требуется permission "shift.delete_shift").
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те смены, у которых start_time попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        delete: operations["v0_shift_destroy"];
        options?: never;
        head?: never;
        /**
         * Частичное обновление смены
         * @description API для работы с врачебной сменой (дежурствами) с поддержкой пагинации.
         *     Поддерживаются операции:
         *       - list: получение списка с пагинацией
         *         (требуется permission "shift.view_shift"),
         *       - retrieve: получение приема по id
         *         (требуется permission "shift.view_shift"),
         *       - create: создание нового приема
         *         (требуется permission "shift.add_shift"),
         *       - update / partial_update: обновление приема
         *         (требуется permission "shift.change_shift"),
         *       - destroy: удаление приема
         *         (требуется permission "shift.delete_shift").
         *
         *     Дополнительно поддерживается фильтрация по диапазону дат.
         *     При передаче query-параметров "start_date" и "end_date" (формат YYYY-MM-DD)
         *     будут возвращаться только те смены, у которых start_time попадает в диапазон
         *     от начала start_date до конца end_date.
         */
        patch: operations["v0_shift_partial_update"];
        trace?: never;
    };
    "/api/v0/specialization/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с специализациями.
         *     Поддерживаются операции:
         *         - list: получение списка должностей (требуется permission "specialization.view_specialization"),
         *         - retrieve: получение должности по id (требуется permission "specialization.view_specialization"),
         *         - create: создание новой должности (требуется permission "specialization.add_specialization"),
         *         - update/partial_update: обновление должности (требуется specialization "staffing.change_specialization"),
         *         - destroy: удаление должности (требуется permission "specialization.delete_specialization"). */
        get: operations["v0_specialization_list"];
        put?: never;
        /** @description API для работы с специализациями.
         *     Поддерживаются операции:
         *         - list: получение списка должностей (требуется permission "specialization.view_specialization"),
         *         - retrieve: получение должности по id (требуется permission "specialization.view_specialization"),
         *         - create: создание новой должности (требуется permission "specialization.add_specialization"),
         *         - update/partial_update: обновление должности (требуется specialization "staffing.change_specialization"),
         *         - destroy: удаление должности (требуется permission "specialization.delete_specialization"). */
        post: operations["v0_specialization_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/specialization/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с специализациями.
         *     Поддерживаются операции:
         *         - list: получение списка должностей (требуется permission "specialization.view_specialization"),
         *         - retrieve: получение должности по id (требуется permission "specialization.view_specialization"),
         *         - create: создание новой должности (требуется permission "specialization.add_specialization"),
         *         - update/partial_update: обновление должности (требуется specialization "staffing.change_specialization"),
         *         - destroy: удаление должности (требуется permission "specialization.delete_specialization"). */
        get: operations["v0_specialization_retrieve"];
        /** @description API для работы с специализациями.
         *     Поддерживаются операции:
         *         - list: получение списка должностей (требуется permission "specialization.view_specialization"),
         *         - retrieve: получение должности по id (требуется permission "specialization.view_specialization"),
         *         - create: создание новой должности (требуется permission "specialization.add_specialization"),
         *         - update/partial_update: обновление должности (требуется specialization "staffing.change_specialization"),
         *         - destroy: удаление должности (требуется permission "specialization.delete_specialization"). */
        put: operations["v0_specialization_update"];
        post?: never;
        /** @description API для работы с специализациями.
         *     Поддерживаются операции:
         *         - list: получение списка должностей (требуется permission "specialization.view_specialization"),
         *         - retrieve: получение должности по id (требуется permission "specialization.view_specialization"),
         *         - create: создание новой должности (требуется permission "specialization.add_specialization"),
         *         - update/partial_update: обновление должности (требуется specialization "staffing.change_specialization"),
         *         - destroy: удаление должности (требуется permission "specialization.delete_specialization"). */
        delete: operations["v0_specialization_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с специализациями.
         *     Поддерживаются операции:
         *         - list: получение списка должностей (требуется permission "specialization.view_specialization"),
         *         - retrieve: получение должности по id (требуется permission "specialization.view_specialization"),
         *         - create: создание новой должности (требуется permission "specialization.add_specialization"),
         *         - update/partial_update: обновление должности (требуется specialization "staffing.change_specialization"),
         *         - destroy: удаление должности (требуется permission "specialization.delete_specialization"). */
        patch: operations["v0_specialization_partial_update"];
        trace?: never;
    };
    "/api/v0/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       — list: получение списка пользователей с пагинацией,
         *       — retrieve: получение пользователя по ID,
         *       — create: создание нового пациента,
         *       — update / partial_update: обновление пациента,
         *       — destroy: удаление пациента. */
        get: operations["v0_users_list"];
        put?: never;
        /** @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       — list: получение списка пользователей с пагинацией,
         *       — retrieve: получение пользователя по ID,
         *       — create: создание нового пациента,
         *       — update / partial_update: обновление пациента,
         *       — destroy: удаление пациента. */
        post: operations["v0_users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       — list: получение списка пользователей с пагинацией,
         *       — retrieve: получение пользователя по ID,
         *       — create: создание нового пациента,
         *       — update / partial_update: обновление пациента,
         *       — destroy: удаление пациента. */
        get: operations["v0_users_retrieve"];
        /** @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       — list: получение списка пользователей с пагинацией,
         *       — retrieve: получение пользователя по ID,
         *       — create: создание нового пациента,
         *       — update / partial_update: обновление пациента,
         *       — destroy: удаление пациента. */
        put: operations["v0_users_update"];
        post?: never;
        /** @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       — list: получение списка пользователей с пагинацией,
         *       — retrieve: получение пользователя по ID,
         *       — create: создание нового пациента,
         *       — update / partial_update: обновление пациента,
         *       — destroy: удаление пациента. */
        delete: operations["v0_users_destroy"];
        options?: never;
        head?: never;
        /** @description API для работы с пациентами с поддержкой пагинации.
         *     Поддерживаются операции:
         *       — list: получение списка пользователей с пагинацией,
         *       — retrieve: получение пользователя по ID,
         *       — create: создание нового пациента,
         *       — update / partial_update: обновление пациента,
         *       — destroy: удаление пациента. */
        patch: operations["v0_users_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AIRecommendationPatientCondition: {
            readonly id: number;
            document_template?: number | null;
            document?: string | null;
            document_fields?: unknown;
            patient: number;
            shift: number;
            description?: string | null;
            /** Format: date-time */
            readonly date: string;
            status: components["schemas"]["Status1d6Enum"];
        };
        AIRecommendationsDoctorAppointment: {
            readonly id: number;
            booking_appointment?: number | null;
            patient?: number | null;
            reception_template: number;
            reception_document?: string | null;
            reception_document_fields?: unknown;
            assigned_doctor?: number | null;
            signed_by: number;
            /** @default true */
            is_first_appointment: boolean;
            /** @default false */
            is_closed: boolean;
            reason_for_inspection?: string | null;
            /** @default no_inspection */
            inspection_choice: components["schemas"]["InspectionChoiceEnum"];
            /** Format: date */
            appointment_date: string;
            /** Format: time */
            start_time: string;
            /** Format: time */
            end_time: string;
            /** Format: date-time */
            readonly date_created: string;
            /** Format: date-time */
            readonly date_updated: string;
            medical_card?: number | null;
            diagnosis?: number | null;
        };
        BookingAppointment: {
            readonly id: number;
            /** Пациент */
            patient: number;
            readonly patient_name: string;
            /** Врач */
            doctor: number;
            readonly doctor_name: string;
            /** Статус */
            status: components["schemas"]["BookingAppointmentStatusEnum"];
            /** Format: date-time */
            vizit_datetime: string;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly created_at: string;
            /**
             * Дата обновления
             * Format: date-time
             */
            readonly updated_at: string;
            readonly booking_str: string;
        };
        /**
         * @description * `planning` - планирование
         *     * `confirmation` - подтверждение
         *     * `отмена` - cancellation
         * @enum {string}
         */
        BookingAppointmentStatusEnum: "planning" | "confirmation" | "отмена";
        ChatRoom: {
            readonly id: number;
            /** Название чата */
            name?: string | null;
            /** Тип чата */
            room_type: components["schemas"]["RoomTypeEnum"];
            readonly participants: number[];
            participant_ids?: number[];
        };
        Contractor: {
            readonly id: number;
            /** Полное наименование */
            full_name: string;
            /**
             * ИНН
             * @description Введите 10 или 12 цифр ИНН
             */
            inn: string;
            /** КПП */
            kpp?: string | null;
            /** Основной банковский счёт */
            bank_account?: string | null;
            /** Вид экономической деятельности */
            economic_activity_type?: string | null;
            /** Форма собственности */
            ownership_form?: string | null;
            /** Страховая организация */
            insurance_organization?: string | null;
        };
        Diagnosis: {
            readonly id: number;
            /** Название */
            name: string;
            /** Описание */
            description?: string | null;
            /** Код */
            code?: string | null;
            /** Синонимы */
            synonym?: string | null;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly date_created: string;
            /**
             * Дата обновления
             * Format: date-time
             */
            readonly date_updated: string;
            /** Категория */
            category?: number | null;
        };
        DiagnosisCategory: {
            readonly id: number;
            /** Название */
            name: string;
            description?: string | null;
        };
        DoctorAppointment: {
            readonly id: number;
            reason_for_inspection?: string | null;
            /** Подписано ЭП */
            is_signed?: boolean | null;
            /**
             * Дата подписания
             * Format: date
             */
            readonly signed_date: string | null;
            /** Организационная подпись */
            org_signature?: unknown;
            /** Документ приема */
            reception_document?: string | null;
            /** Поля документа */
            reception_document_fields?: unknown;
            /**
             * Флаг первого приема
             * @description Флаг, означающий, что это первичный прием пациента
             */
            is_first_appointment?: boolean;
            /**
             * Приём закрыт
             * @description Флаг, указывающий, что приём закрыт
             */
            is_closed?: boolean;
            /** Тип обследования */
            inspection_choice?: components["schemas"]["InspectionChoiceEnum"];
            /**
             * Дата приема
             * Format: date
             * @description Укажите дату приема (YYYY-MM-DD)
             */
            appointment_date: string;
            /**
             * Время начала приема
             * Format: time
             * @description Время начала приема
             */
            start_time: string;
            /**
             * Время окончания приема
             * Format: time
             * @description Время окончания приема
             */
            end_time: string;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly date_created: string;
            /**
             * Дата обновления
             * Format: date-time
             */
            readonly date_updated: string;
            /** Запись на прием */
            booking_appointment?: number | null;
            /**
             * Пациент
             * @description Внешний ключ на пациента направленного на приём
             */
            patient?: number | null;
            /** Шаблон приема */
            reception_template?: number | null;
            /**
             * Назначенный врач
             * @description Внешний ключ на врача, к которому был записан пациент
             */
            assigned_doctor?: number | null;
            /** Кем подписан */
            signed_by?: number | null;
            medical_card?: number | null;
            /** Диагноз */
            diagnosis?: number | null;
        };
        Employee: {
            readonly id: number;
            short_description?: string | null;
            /** Фамилия */
            last_name: string;
            /** Имя */
            first_name: string;
            /** Отчество */
            patronymic?: string | null;
            /** Пол */
            gender?: components["schemas"]["Gender71aEnum"];
            /**
             * Дата рождения
             * Format: date
             */
            date_of_birth?: string | null;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly date_created: string;
            /**
             * СНИЛС
             * @description Укажите СНИЛС в формате 123-456-789 01 или 12345678901
             */
            snils?: string | null;
            /** ИНН */
            inn?: string | null;
            /** Серия паспорта */
            passport_series?: string | null;
            /** Номер паспорта */
            passport_number?: string | null;
            /**
             * Фото
             * Format: uri
             */
            photo?: string | null;
            /** Адрес регистрации */
            registration_address?: string | null;
            /** Адрес фактического проживания */
            actual_address?: string | null;
            /**
             * Почта
             * Format: email
             */
            email?: string | null;
            /** Номер телефона */
            phone?: string | null;
            /** Длительность приёма */
            appointment_duration?: string | null;
            /** Чат ID телеграмма для отправки уведомлений */
            telegram_chat_id?: string | null;
            /** Пользователь */
            user?: number | null;
            /** Подразделение */
            department?: number | null;
            /** Должность */
            position?: number | null;
            /** Специализация */
            specialization?: number | null;
        };
        Filial: {
            readonly id: number;
            /** Название */
            name?: string | null;
            /** Описание */
            description?: string | null;
            /** Дом */
            house: string;
            /** Строение */
            building?: string | null;
            /** Улица */
            street: string;
            /** Город */
            city: string;
        };

        FilialDepartment: {
            readonly id: number;
            /** Название отделения */
            name: string;
            /** Руководитель */
            director?: number | null;
            /** Филиал */
            filial: number | null;

        };
        /**
         * @description * `M` - Мужской
         *     * `F` - Женский
         * @enum {string}
         */
        Gender62bEnum: "M" | "F";
        /**
         * @description * `M` - Мужской
         *     * `F` - Женский
         *     * `U` - Не указан
         * @enum {string}
         */
        Gender71aEnum: "M" | "F" | "U";
        HospitalStays: {
            readonly id: number;
            /** Пациент */
            patient: number;
            readonly patient_name: string;
            /** Описание */
            description?: string | null;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            /** Номер палаты */
            ward_number?: string | null;
            /** Прием */
            appointment: number;
            readonly appointment_str: string;
            readonly hospital_stay_str: string;
            /** Шаблон документа */
            document_template?: number | null;
            /** Документ смены */
            document?: string | null;
            /** Поля документа */
            document_fields?: unknown;
        };
        /**
         * @description * `no_inspection` - Не нуждается в обследовании
         *     * `additional` - Нуждается в проведении доп обследования
         *     * `center` - Нуждается в обследовании в центре
         *     * `ambulatory` - Нуждается в амбулаторном обследовании
         *     * `stationary` - Нуждается в стационарном обследовании
         *     * `sanatorium` - Нуждается в санаторно-курортном лечении
         *     * `dispensary` - Нуждается в диспансерном наблюдении
         *     * `preventive` - Нуждается в лечебно-профилактических мероприятиях
         *     * `referral` - Нуждается в направлении на медико-социальную экспертизу
         * @enum {string}
         */
        InspectionChoiceEnum: "no_inspection" | "additional" | "center" | "ambulatory" | "stationary" | "sanatorium" | "dispensary" | "preventive" | "referral";
        LaboratoryModel: {
            readonly id: number;
            /**
             * Уникальный идентификатор лаборатории
             * Format: uuid
             */
            readonly guid: string;
            /** Название лаборатории */
            name: string;
            /** Адрес лаборатории */
            address: string;
        };
        LaboratoryResearchModel: {
            readonly id: number;
            /**
             * GUID направления
             * Format: uuid
             */
            readonly lab_direction_guid: string;
            /** Статус исследования */
            status: components["schemas"]["LaboratoryResearchModelStatusEnum"];
            /** Номер документа */
            number: string;
            /**
             * Дата создания
             * Format: date-time
             */
            create_date: string;
            /**
             * Дата направления
             * Format: date-time
             */
            direction_date: string;
            /**
             * GUID предыдущего исследования
             * Format: uuid
             */
            previous_research_guid?: string | null;
            /** Предыдущее исследование выполнено */
            is_previous_research?: boolean;
            /** Приоритетное исследование (CITO) */
            is_priority?: boolean;
            /** Пациент */
            patient?: number | null;
            /** Лаборатория */
            laboratory: number;
        };
        /**
         * @description * `completed` - Завершено
         *     * `process` - В процессе
         * @enum {string}
         */
        LaboratoryResearchModelStatusEnum: "completed" | "process";
        LaboratoryResearchPDFModel: {
            readonly id: number;
            /**
             * PDF-документ
             * Format: byte
             */
            readonly pdf_data: string;
            /**
             * Дата создания документа
             * Format: date-time
             */
            readonly created_at: string;
            /**
             * GUID направления
             * Format: uuid
             */
            research: string;
        };
        Login: {
            username: string;
            password: string;
        };
        Laboratory: {
            readonly id: number;
            /** Уникальный идентификатор лаборатории */
            guid: string;
            /** Название лаборатории */
            name: string;
            /** Адрес лаборатории */
            address: string;
        };
        LabResearch: {
            readonly id: number;
            /** Уникальный идентификатор направления */
            lab_direction_guid: string;
            /** Статус направления */
            status: "completed" | "process";
            /** Номер направления */
            number: string;
            /** Дата создания */
            readonly create_date: string;
            /** Дата направления */
            direction_date: string;
            /** GUID предыдущего исследования */
            previous_research_guid?: string | null;
            /** Флаг предыдущего исследования */
            is_previous_research?: boolean;
            /** Флаг приоритетности */
            is_priority?: boolean;
            /** ID пациента */
            patient?: number;
            /** ID лаборатории */
            laboratory: number;
        };

        MedicalCard: {
            readonly id: number;
            /** Подписано ЭП */
            is_signed?: boolean | null;
            /**
             * Дата подписания
             * Format: date
             */
            readonly signed_date: string | null;
            /** Организационная подпись */
            org_signature?: unknown;
            /** Наименование */
            name: string;
            /** Номер карты */
            number?: string;
            /**
             * Дата регистрации
             * Format: date-time
             */
            readonly date_created: string;
            /**
             * Дата обновления
             * Format: date-time
             */
            readonly date_updated: string | null;
            /**
             * Дата закрытия
             * Format: date-time
             */
            date_closed?: string | null;
            /** Комментарий */
            comment?: string | null;
            /** Кем подписан */
            signed_by?: number | null;
            /** Пациент */
            client?: number | null;
            /** Тип карты */
            card_type?: number | null;
            /** Филиал */
            filial?: number | null;
        };
        MedicalCardType: {
            readonly id: number;
            /** Название */
            name: string;
            /** Суффикс номера карты */
            suffix?: string | null;
            /** Префикс номера карты */
            prefix?: string | null;
            /** Начальный номер */
            begin_number?: string | null;
            /** Описание */
            description?: string | null;
        };
        PaginatedContractorList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Contractor"][];
        };
        PaginatedDiagnosisCategoryList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["DiagnosisCategory"][];
        };
        PaginatedDiagnosisList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Diagnosis"][];
        };
        PaginatedDoctorAppointmentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["DoctorAppointment"][];
        };
        PaginatedEmployeeList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Employee"][];
        };
        PaginatedFilialList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Filial"][];
        };
        PaginatedHospitalStaysList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["HospitalStays"][];
        };
        PaginatedMedicalCardList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["MedicalCard"][];
        };
        PaginatedMedicalCardTypeList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["MedicalCardType"][];
        };
        PaginatedPatientConditionList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["PatientCondition"][];
        };
        PaginatedPatientList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Patient"][];
        };
        PaginatedPositionList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Position"][];
        };
        PaginatedReceptionTemplateList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["ReceptionTemplate"][];
        };
        PaginatedReceptionTimeList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["ReceptionTime"][];
        };
        PaginatedShiftList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Shift"][];
        };
        PaginatedShiftTransferList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["ShiftTransfer"][];
        };
        PaginatedSpecializationList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=4
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?page=2
             */
            previous?: string | null;
            results: components["schemas"]["Specialization"][];
        };
        PatchedBookingAppointment: {
            readonly id?: number;
            /** Пациент */
            patient?: number;
            readonly patient_name?: string;
            /** Врач */
            doctor?: number;
            readonly doctor_name?: string;
            /** Статус */
            status?: components["schemas"]["BookingAppointmentStatusEnum"];
            /** Format: date-time */
            vizit_datetime?: string;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly created_at?: string;
            /**
             * Дата обновления
             * Format: date-time
             */
            readonly updated_at?: string;
            readonly booking_str?: string;
        };
        PatchedChatRoom: {
            readonly id?: number;
            /** Название чата */
            name?: string | null;
            /** Тип чата */
            room_type?: components["schemas"]["RoomTypeEnum"];
            readonly participants?: number[];
            participant_ids?: number[];
        };
        PatchedContractor: {
            readonly id?: number;
            /** Полное наименование */
            full_name?: string;
            /**
             * ИНН
             * @description Введите 10 или 12 цифр ИНН
             */
            inn?: string;
            /** КПП */
            kpp?: string | null;
            /** Основной банковский счёт */
            bank_account?: string | null;
            /** Вид экономической деятельности */
            economic_activity_type?: string | null;
            /** Форма собственности */
            ownership_form?: string | null;
            /** Страховая организация */
            insurance_organization?: string | null;
        };
        PatchedDiagnosis: {
            readonly id?: number;
            /** Название */
            name?: string;
            /** Описание */
            description?: string | null;
            /** Код */
            code?: string | null;
            /** Синонимы */
            synonym?: string | null;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly date_created?: string;
            /**
             * Дата обновления
             * Format: date-time
             */
            readonly date_updated?: string;
            /** Категория */
            category?: number | null;
        };
        PatchedDiagnosisCategory: {
            readonly id?: number;
            /** Название */
            name?: string;
            description?: string | null;
        };
        PatchedDoctorAppointment: {
            readonly id?: number;
            reason_for_inspection?: string | null;
            /** Подписано ЭП */
            is_signed?: boolean | null;
            /**
             * Дата подписания
             * Format: date
             */
            readonly signed_date?: string | null;
            /** Организационная подпись */
            org_signature?: unknown;
            /** Документ приема */
            reception_document?: string | null;
            /** Поля документа */
            reception_document_fields?: unknown;
            /**
             * Флаг первого приема
             * @description Флаг, означающий, что это первичный прием пациента
             */
            is_first_appointment?: boolean;
            /**
             * Приём закрыт
             * @description Флаг, указывающий, что приём закрыт
             */
            is_closed?: boolean;
            /** Тип обследования */
            inspection_choice?: components["schemas"]["InspectionChoiceEnum"];
            /**
             * Дата приема
             * Format: date
             * @description Укажите дату приема (YYYY-MM-DD)
             */
            appointment_date?: string;
            /**
             * Время начала приема
             * Format: time
             * @description Время начала приема
             */
            start_time?: string;
            /**
             * Время окончания приема
             * Format: time
             * @description Время окончания приема
             */
            end_time?: string;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly date_created?: string;
            /**
             * Дата обновления
             * Format: date-time
             */
            readonly date_updated?: string;
            /** Запись на прием */
            booking_appointment?: number | null;
            /**
             * Пациент
             * @description Внешний ключ на пациента направленного на приём
             */
            patient?: number | null;
            /** Шаблон приема */
            reception_template?: number | null;
            /**
             * Назначенный врач
             * @description Внешний ключ на врача, к которому был записан пациент
             */
            assigned_doctor?: number | null;
            /** Кем подписан */
            signed_by?: number | null;
            medical_card?: number | null;
            /** Диагноз */
            diagnosis?: number | null;
        };
        PatchedEmployee: {
            readonly id?: number;
            short_description?: string | null;
            /** Фамилия */
            last_name?: string;
            /** Имя */
            first_name?: string;
            /** Отчество */
            patronymic?: string | null;
            /** Пол */
            gender?: components["schemas"]["Gender71aEnum"];
            /**
             * Дата рождения
             * Format: date
             */
            date_of_birth?: string | null;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly date_created?: string;
            /**
             * СНИЛС
             * @description Укажите СНИЛС в формате 123-456-789 01 или 12345678901
             */
            snils?: string | null;
            /** ИНН */
            inn?: string | null;
            /** Серия паспорта */
            passport_series?: string | null;
            /** Номер паспорта */
            passport_number?: string | null;
            /**
             * Фото
             * Format: uri
             */
            photo?: string | null;
            /** Адрес регистрации */
            registration_address?: string | null;
            /** Адрес фактического проживания */
            actual_address?: string | null;
            /**
             * Почта
             * Format: email
             */
            email?: string | null;
            /** Номер телефона */
            phone?: string | null;
            /** Длительность приёма */
            appointment_duration?: string | null;
            /** Чат ID телеграмма для отправки уведомлений */
            telegram_chat_id?: string | null;
            /** Пользователь */
            user?: number | null;
            /** Подразделение */
            department?: number | null;
            /** Должность */
            position?: number | null;
            /** Специализация */
            specialization?: number | null;
        };
        PatchedFilial: {
            readonly id?: number;
            /** Название */
            name?: string | null;
            /** Описание */
            description?: string | null;
            /** Дом */
            house?: string;
            /** Строение */
            building?: string | null;
            /** Улица */
            street?: string;
            /** Город */
            city?: string;
        };
        PatchedFilialDepartment: {
            readonly id?: number;
            /** Название отделения */
            name?: string;
            /** Руководитель */
            director?: number | null;
            /** Филиал */
            filial?: number | null;
        };
        PatchedHospitalStays: {
            readonly id?: number;
            /** Пациент */
            patient?: number;
            readonly patient_name?: string;
            /** Описание */
            description?: string | null;
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
            /** Номер палаты */
            ward_number?: string | null;
            /** Прием */
            appointment?: number;
            readonly appointment_str?: string;
            readonly hospital_stay_str?: string;
            /** Шаблон документа */
            document_template?: number | null;
            /** Документ смены */
            document?: string | null;
            /** Поля документа */
            document_fields?: unknown;
        };
        PatchedMedicalCard: {
            readonly id?: number;
            /** Подписано ЭП */
            is_signed?: boolean | null;
            /**
             * Дата подписания
             * Format: date
             */
            readonly signed_date?: string | null;
            /** Организационная подпись */
            org_signature?: unknown;
            /** Наименование */
            name?: string;
            /** Номер карты */
            number?: string;
            /**
             * Дата регистрации
             * Format: date-time
             */
            readonly date_created?: string;
            /**
             * Дата обновления
             * Format: date-time
             */
            readonly date_updated?: string | null;
            /**
             * Дата закрытия
             * Format: date-time
             */
            date_closed?: string | null;
            /** Комментарий */
            comment?: string | null;
            /** Кем подписан */
            signed_by?: number | null;
            /** Пациент */
            client?: number | null;
            /** Тип карты */
            card_type?: number | null;
            /** Филиал */
            filial?: number | null;
        };
        PatchedMedicalCardType: {
            readonly id?: number;
            /** Название */
            name?: string;
            /** Суффикс номера карты */
            suffix?: string | null;
            /** Префикс номера карты */
            prefix?: string | null;
            /** Начальный номер */
            begin_number?: string | null;
            /** Описание */
            description?: string | null;
        };
        PatchedPatient: {
            readonly id?: number;
            place_of_work?: string | null;
            /** Фамилия */
            last_name?: string;
            /** Имя */
            first_name?: string;
            /** Отчество */
            patronymic?: string | null;
            /** Пол */
            gender?: components["schemas"]["Gender71aEnum"];
            /**
             * Дата рождения
             * Format: date
             */
            date_of_birth?: string | null;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly date_created?: string;
            /**
             * СНИЛС
             * @description Укажите СНИЛС в формате 123-456-789 01 или 12345678901
             */
            snils?: string | null;
            /** ИНН */
            inn?: string | null;
            /** Серия паспорта */
            passport_series?: string | null;
            /** Номер паспорта */
            passport_number?: string | null;
            /**
             * Фото
             * Format: uri
             */
            photo?: string | null;
            /** Адрес регистрации */
            registration_address?: string | null;
            /** Адрес фактического проживания */
            actual_address?: string | null;
            /**
             * Почта
             * Format: email
             */
            email?: string | null;
            /** Номер телефона */
            phone?: string | null;
            /** Дополнительное место работы */
            additional_place_of_work?: string | null;
            /** Профессия */
            profession?: string | null;
            /** ОМС */
            oms?: string | null;
            /** Человек, который зарегистрировал пациента */
            registered_by?: number | null;
            /** Контрагент (работодатель клиента) */
            contractor?: number | null;
            /** Законный представитель */
            legal_representative?: number | null;
        };
        PatchedPatientCondition: {
            readonly id?: number;
            /** Пациент */
            patient?: number;
            readonly patient_name?: string;
            /** Врачебная смена */
            shift?: number;
            readonly shift_str?: string;
            /** Описание состояния пациента */
            description?: string | null;
            /** Format: date-time */
            readonly date?: string;
            /** Статус состояния пацента */
            status?: components["schemas"]["Status1d6Enum"];
            readonly condition_str?: string;
            /** Шаблон документа */
            document_template?: number | null;
            /** Документ смены */
            document?: string | null;
            /** Поля документа */
            document_fields?: unknown;
        };
        PatchedPosition: {
            readonly id?: number;
            name?: string;
            short_name?: string | null;
            minzdrav_position?: string | null;
            /** Группа доступа */
            group?: number | null;
        };
        PatchedReceptionTemplate: {
            readonly id?: number;
            /** Название шаблона */
            name?: string;
            /** Описание шаблона */
            description?: string | null;
            /** Шаблон */
            html?: string | null;
            /** Поля приема */
            fields?: unknown;
            /** Специализация шаблона */
            specialization?: number;
        };
        PatchedReceptionTime: {
            readonly id?: number;
            /**
             * День приёма
             * Format: date
             * @description Укажите дату приёма (YYYY-MM-DD)
             */
            reception_day?: string;
            /**
             * Время начала
             * Format: time
             * @description Время начала рабочего периода
             */
            start_time?: string;
            /**
             * Время окончания
             * Format: time
             * @description Время окончания рабочего периода
             */
            end_time?: string;
            /** Врач */
            doctor?: number;
        };
        PatchedShift: {
            readonly id?: number;
            /** Врач */
            doctor?: number;
            readonly doctor_name?: string;
            /** Format: date-time */
            start_time?: string;
            /** Format: date-time */
            end_time?: string;
            readonly shift_str?: string;
            /** Шаблон документа */
            document_template?: number | null;
            /** Документ смены */
            document?: string | null;
            /** Поля документа */
            document_fields?: unknown;
        };
        PatchedShiftTransfer: {
            readonly id?: number;
            /** Какая смена передается */
            from_shift?: number;
            readonly from_shift_str?: string;
            /** Другая смена */
            to_shift?: number;
            readonly to_shift_str?: string;
            /** Format: date-time */
            readonly date?: string;
            /** Комментарий */
            comment?: string | null;
            readonly transfer_str?: string;
            /** Шаблон документа */
            document_template?: number | null;
            /** Документ смены */
            document?: string | null;
            /** Поля документа */
            document_fields?: unknown;
        };
        PatchedSpecialization: {
            readonly id?: number;
            /** Название специализации */
            title?: string;
            /** Описание специализации */
            description?: string | null;
        };
        PatchedUser: {
            readonly id?: number;
            /** Имя пользователя */
            username?: string;
            readonly position_id?: string;
            readonly position_name?: string;
        };
        Patient: {
            readonly id: number;
            place_of_work?: string | null;
            /** Фамилия */
            last_name: string;
            /** Имя */
            first_name: string;
            /** Отчество */
            patronymic?: string | null;
            /** Пол */
            gender?: components["schemas"]["Gender71aEnum"];
            /**
             * Дата рождения
             * Format: date
             */
            date_of_birth?: string | null;
            /**
             * Дата создания
             * Format: date-time
             */
            readonly date_created: string;
            /**
             * СНИЛС
             * @description Укажите СНИЛС в формате 123-456-789 01 или 12345678901
             */
            snils?: string | null;
            /** ИНН */
            inn?: string | null;
            /** Серия паспорта */
            passport_series?: string | null;
            /** Номер паспорта */
            passport_number?: string | null;
            /**
             * Фото
             * Format: uri
             */
            photo?: string | null;
            /** Адрес регистрации */
            registration_address?: string | null;
            /** Адрес фактического проживания */
            actual_address?: string | null;
            /**
             * Почта
             * Format: email
             */
            email?: string | null;
            /** Номер телефона */
            phone?: string | null;
            /** Дополнительное место работы */
            additional_place_of_work?: string | null;
            /** Профессия */
            profession?: string | null;
            /** ОМС */
            oms?: string | null;
            /** Человек, который зарегистрировал пациента */
            registered_by?: number | null;
            /** Контрагент (работодатель клиента) */
            contractor?: number | null;
            /** Законный представитель */
            legal_representative?: number | null;
        };
        PatientCondition: {
            readonly id: number;
            /** Пациент */
            patient: number;
            readonly patient_name: string;
            /** Врачебная смена */
            shift: number;
            readonly shift_str: string;
            /** Описание состояния пациента */
            description?: string | null;
            /** Format: date-time */
            readonly date: string;
            /** Статус состояния пацента */
            status: components["schemas"]["Status1d6Enum"];
            readonly condition_str: string;
            /** Шаблон документа */
            document_template?: number | null;
            /** Документ смены */
            document?: string | null;
            /** Поля документа */
            document_fields?: unknown;
        };
        Position: {
            readonly id: number;
            name: string;
            short_name?: string | null;
            minzdrav_position?: string | null;
            /** Группа доступа */
            group?: number | null;
        };
        ReceptionTemplate: {
            readonly id: number;
            /** Название шаблона */
            name: string;
            /** Описание шаблона */
            description?: string | null;
            /** Шаблон */
            html?: string | null;
            /** Поля приема */
            fields?: unknown;
            /** Специализация шаблона */
            specialization: number;
        };
        ReceptionTime: {
            readonly id: number;
            /**
             * День приёма
             * Format: date
             * @description Укажите дату приёма (YYYY-MM-DD)
             */
            reception_day: string;
            /**
             * Время начала
             * Format: time
             * @description Время начала рабочего периода
             */
            start_time: string;
            /**
             * Время окончания
             * Format: time
             * @description Время окончания рабочего периода
             */
            end_time: string;
            /** Врач */
            doctor: number;
        };
        RegistrationInput: {
            /** @description Имя сотрудника */
            first_name: string;
            /** @description Фамилия сотрудника */
            last_name: string;
            /** @description Отчество сотрудника */
            patronymic: string;
            /** @description Определяет, может ли пользователь заходить в систему */
            is_django_user: boolean;
            /** @description Пол сотрудника
             *
             *     * `M` - Мужской
             *     * `F` - Женский */
            gender: components["schemas"]["Gender62bEnum"];
            /**
             * Format: date
             * @description Дата рождения сотрудника
             */
            date_of_birth: string;
            /** @description СНИЛС сотрудника */
            snils: string;
            /** @description ИНН сотрудника */
            inn: string;
            /** @description Адрес регистрации сотрудника */
            registration_address: string;
            /** @description Фактический адрес сотрудника */
            actual_address: string;
            /**
             * Format: email
             * @description Email сотрудника
             */
            email: string;
            /** @description Номер телефона сотрудника */
            phone: string;
            /** @description ID отдела филиала */
            department: number;
            /** @description ID должности сотрудника */
            position: number;
            /** @description Краткое описание сотрудника */
            short_description: string;
        };
        RegistrationOutput: {
            first_name: string;
            last_name: string;
            patronymic: string;
            gender: components["schemas"]["Gender62bEnum"];
            /** Format: date */
            date_of_birth: string;
            snils: string;
            inn: string;
            registration_address: string;
            actual_address: string;
            /** Format: email */
            email: string;
            phone: string;
            department: number;
            position: number;
            short_description: string;
            user: components["schemas"]["UserCredentials"];
        };
        /**
         * @description * `private` - Личный
         *     * `group` - Групповой
         * @enum {string}
         */
        RoomTypeEnum: "private" | "group";
        Shift: {
            readonly id: number;
            /** Врач */
            doctor: number;
            readonly doctor_name: string;
            /** Format: date-time */
            start_time: string;
            /** Format: date-time */
            end_time: string;
            readonly shift_str: string;
            /** Шаблон документа */
            document_template?: number | null;
            /** Документ смены */
            document?: string | null;
            /** Поля документа */
            document_fields?: unknown;
        };
        ShiftTransfer: {
            readonly id: number;
            /** Какая смена передается */
            from_shift: number;
            readonly from_shift_str: string;
            /** Другая смена */
            to_shift: number;
            readonly to_shift_str: string;
            /** Format: date-time */
            readonly date: string;
            /** Комментарий */
            comment?: string | null;
            readonly transfer_str: string;
            /** Шаблон документа */
            document_template?: number | null;
            /** Документ смены */
            document?: string | null;
            /** Поля документа */
            document_fields?: unknown;
        };
        Specialization: {
            readonly id: number;
            /** Название специализации */
            title: string;
            /** Описание специализации */
            description?: string | null;
        };
        /**
         * @description * `Critical` - Критическое
         *     * `Worsening` - Ухудшение
         *     * `Stable` - Стабильное
         *     * `Improving` - Улучшение
         *     * `Recovering` - Выздоровление
         *     * `Post-operative` - Послеоперационное
         *     * `Unstable` - Неустойчивое
         *     * `No change` - Без изменений
         * @enum {string}
         */
        Status1d6Enum: "Critical" | "Worsening" | "Stable" | "Improving" | "Recovering" | "Post-operative" | "Unstable" | "No change";
        User: {
            readonly id: number;
            /** Имя пользователя */
            username: string;
            readonly position_id: string;
            readonly position_name: string;
        };
        UserCredentials: {
            username: string;
            password: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    v0_ai_recommendation_doctor_appointment_ai_response_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AIRecommendationsDoctorAppointment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIRecommendationsDoctorAppointment"];
                };
            };
        };
    };
    v0_ai_recommendation_patient_condition_ai_response_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AIRecommendationPatientCondition"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AIRecommendationPatientCondition"];
                };
            };
        };
    };
    v0_appointments_list: {
        parameters: {
            query?: {
                /** @description Конечная дата в формате YYYY-MM-DD */
                end_date?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
                /** @description Начальная дата в формате YYYY-MM-DD */
                start_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDoctorAppointmentList"];
                };
            };
        };
    };
    v0_appointments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorAppointment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorAppointment"];
                };
            };
        };
    };
    v0_appointments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Приём к врачу. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorAppointment"];
                };
            };
        };
    };
    v0_appointments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Приём к врачу. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorAppointment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorAppointment"];
                };
            };
        };
    };
    v0_appointments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Приём к врачу. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_appointments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Приём к врачу. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDoctorAppointment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorAppointment"];
                };
            };
        };
    };
    sign_doctor_appointment: {
        parameters: {
            query?: never;
            header: {
                /** @description Токен авторизации пользователя. */
                Authorization: string;
            };
            path: {
                /** @description A unique integer value identifying this Приём к врачу. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorAppointment"];
            };
        };
        responses: {
            /** @description Успешное подписание приема врача */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка при подписании (например, если прием уже подписан) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неавторизованный доступ */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пользователь не является сотрудником, или не имеет прав на подписание */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Прием врача не найден или удалён */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_booking_appointments_list: {
        parameters: {
            query?: {
                /** @description Конечная дата в формате YYYY-MM-DD */
                end_date?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Начальная дата в формате YYYY-MM-DD */
                start_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBookingAppointmentList"];
                };
            };
        };
    };
    v0_booking_appointments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingAppointment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingAppointment"];
                };
            };
        };
    };
    v0_booking_appointments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Запись на прием. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingAppointment"];
                };
            };
        };
    };
    v0_booking_appointments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Запись на прием. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookingAppointment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingAppointment"];
                };
            };
        };
    };
    v0_booking_appointments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Запись на прием. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_booking_appointments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Запись на прием. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBookingAppointment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookingAppointment"];
                };
            };
        };
    };
    v0_chat_rooms_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatRoom"][];
                };
            };
        };
    };
    v0_chat_rooms_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRoom"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatRoom"];
                };
            };
        };
    };
    v0_chat_rooms_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this chat room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatRoom"];
                };
            };
        };
    };
    v0_chat_rooms_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this chat room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRoom"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatRoom"];
                };
            };
        };
    };
    v0_chat_rooms_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this chat room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_chat_rooms_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this chat room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedChatRoom"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatRoom"];
                };
            };
        };
    };
    v0_chat_rooms_messages_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Идентификатор чат-комнаты */
                room_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_chat_rooms_messages_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Идентификатор чат-комнаты */
                room_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description No response body */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_chat_rooms_messages_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description Идентификатор сообщения */
                pk: number;
                /** @description Идентификатор чат-комнаты */
                room_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Сообщение успешно удалено. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_contractor_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedContractorList"];
                };
            };
        };
    };
    v0_contractor_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Contractor"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contractor"];
                };
            };
        };
    };
    v0_contractor_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Контрагент. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contractor"];
                };
            };
        };
    };
    v0_contractor_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Контрагент. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Contractor"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contractor"];
                };
            };
        };
    };
    v0_contractor_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Контрагент. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_contractor_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Контрагент. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedContractor"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contractor"];
                };
            };
        };
    };
    v0_current_user_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    v0_diagnoses_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDiagnosisList"];
                };
            };
        };
    };
    v0_diagnoses_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Diagnosis"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Diagnosis"];
                };
            };
        };
    };
    v0_diagnoses_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Диагноз. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Diagnosis"];
                };
            };
        };
    };
    v0_diagnoses_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Диагноз. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Diagnosis"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Diagnosis"];
                };
            };
        };
    };
    v0_diagnoses_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Диагноз. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_diagnoses_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Диагноз. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDiagnosis"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Diagnosis"];
                };
            };
        };
    };
    v0_diagnosis_categories_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedDiagnosisCategoryList"];
                };
            };
        };
    };
    v0_diagnosis_categories_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiagnosisCategory"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiagnosisCategory"];
                };
            };
        };
    };
    v0_diagnosis_categories_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Категории диагноза. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiagnosisCategory"];
                };
            };
        };
    };
    v0_diagnosis_categories_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Категории диагноза. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiagnosisCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiagnosisCategory"];
                };
            };
        };
    };
    v0_diagnosis_categories_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Категории диагноза. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_diagnosis_categories_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Категории диагноза. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedDiagnosisCategory"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiagnosisCategory"];
                };
            };
        };
    };
    v0_employee_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Поисковая строка (разделение терминов пробелом) */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEmployeeList"];
                };
            };
        };
    };
    v0_employee_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Employee"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v0_employee_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Сотрудник. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"];
                };
            };
        };
    };
    v0_employee_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Сотрудник. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Employee"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"];
                };
            };
        };
    };
    v0_employee_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Сотрудник. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v0_employee_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Сотрудник. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEmployee"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employee"];
                };
            };
        };
    };
    v0_filial_list: {
        parameters: {
            query?: {
                /** @description Номер страницы */
                page?: number;
                /** @description Количество элементов на странице */
                page_size?: number;
                /** @description Поисковая строка (разделение терминов пробелом) */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedFilialList"];
                };
            };
        };
    };
    v0_filial_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Filial"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Filial"];
                };
            };
        };
    };
    v0_filial_departments_list: {
        parameters: {
            query?: {
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilialDepartment"][];
                };
            };
        };
    };
    v0_filial_departments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilialDepartment"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilialDepartment"];
                };
            };
        };
    };
    v0_filial_departments_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Отделение филиала. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilialDepartment"];
                };
            };
        };
    };
    v0_filial_departments_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Отделение филиала. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FilialDepartment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilialDepartment"];
                };
            };
        };
    };
    v0_filial_departments_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Отделение филиала. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_filial_departments_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Отделение филиала. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFilialDepartment"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilialDepartment"];
                };
            };
        };
    };
    v0_filial_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Филиал. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Filial"];
                };
            };
        };
    };
    v0_filial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Филиал. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Filial"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Filial"];
                };
            };
        };
    };
    v0_filial_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Филиал. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_filial_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Филиал. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedFilial"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Filial"];
                };
            };
        };
    };
    v0_hospital_stays_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedHospitalStaysList"];
                };
            };
        };
    };
    v0_hospital_stays_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HospitalStays"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalStays"];
                };
            };
        };
    };
    v0_hospital_stays_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Госпитализация. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalStays"];
                };
            };
        };
    };
    v0_hospital_stays_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Госпитализация. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HospitalStays"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalStays"];
                };
            };
        };
    };
    v0_hospital_stays_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Госпитализация. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_hospital_stays_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Госпитализация. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedHospitalStays"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HospitalStays"];
                };
            };
        };
    };
    v0_laboratory_list: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, address. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLaboratoryModelList"];
                };
            };
        };
    };
    v0_laboratory_research_list: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по полям: number, status, laboratory__name. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLaboratoryResearchModelList"];
                };
            };
        };
    };
    v0_laboratory_research_pdf_list: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по полям: research__lab_direction_guid, created_at. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLaboratoryResearchPDFModelList"];
                };
            };
        };
    };
    v0_laboratory_research_pdf_retrieve: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по полям: research__lab_direction_guid, created_at. */
                search?: string;
            };
            header?: never;
            path: {
                research__lab_direction_guid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LaboratoryResearchPDFModel"];
                };
            };
        };
    };
    v0_laboratory_research_retrieve: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по полям: number, status, laboratory__name. */
                search?: string;
            };
            header?: never;
            path: {
                lab_direction_guid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LaboratoryResearchModel"];
                };
            };
        };
    };
    v0_laboratory_retrieve: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, address. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Лаборатория. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LaboratoryModel"];
                };
            };
        };
    };
    v0_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Login"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        detail?: string;
                        user_id?: number;
                        position_id?: number;
                        position?: string;
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        detail?: string;
                    };
                };
            };
        };
    };
    v0_logout_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_medical_card_list: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, number, card_type__name, client__last_name, client__first_name, client__patronymic, client__date_of_birth. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMedicalCardList"];
                };
            };
        };
    };
    v0_medical_card_create: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, number, card_type__name, client__last_name, client__first_name, client__patronymic, client__date_of_birth. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicalCard"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalCard"];
                };
            };
        };
    };
    v0_medical_card_types_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMedicalCardTypeList"];
                };
            };
        };
    };
    v0_medical_card_types_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicalCardType"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalCardType"];
                };
            };
        };
    };
    v0_medical_card_types_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Тип мед.карты. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalCardType"];
                };
            };
        };
    };
    v0_medical_card_types_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Тип мед.карты. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicalCardType"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalCardType"];
                };
            };
        };
    };
    v0_medical_card_types_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Тип мед.карты. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_medical_card_types_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Тип мед.карты. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMedicalCardType"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalCardType"];
                };
            };
        };
    };
    v0_medical_card_retrieve: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, number, card_type__name, client__last_name, client__first_name, client__patronymic, client__date_of_birth. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Медицинская карта. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalCard"];
                };
            };
        };
    };
    v0_medical_card_update: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, number, card_type__name, client__last_name, client__first_name, client__patronymic, client__date_of_birth. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Медицинская карта. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicalCard"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalCard"];
                };
            };
        };
    };
    v0_medical_card_destroy: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, number, card_type__name, client__last_name, client__first_name, client__patronymic, client__date_of_birth. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Медицинская карта. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_medical_card_partial_update: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, number, card_type__name, client__last_name, client__first_name, client__patronymic, client__date_of_birth. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Медицинская карта. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedMedicalCard"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicalCard"];
                };
            };
        };
    };
    sign_medical_card: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: name, number, card_type__name, client__last_name, client__first_name, client__patronymic, client__date_of_birth. */
                search?: string;
            };
            header: {
                /** @description Токен авторизации пользователя. */
                Authorization: string;
            };
            path: {
                /** @description A unique integer value identifying this Медицинская карта. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicalCard"];
            };
        };
        responses: {
            /** @description Успешное подписание медицинской карты */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка при подписании (например, если карта уже подписана) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неавторизованный доступ */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пользователь не является сотрудником, или не имеет прав на подписание */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Медицинская карта не найдена или удалена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_medical_drug_list: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: klp_code, smnn_code, ktru_code, name_trade, country, oksm_code, name_producer. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedMedicineModelList"];
                };
            };
        };
    };
    v0_medical_drug_retrieve: {
        parameters: {
            query?: {
                /** @description Номер страницы для пагинации. */
                page?: number;
                /** @description Количество объектов на странице. */
                page_size?: number;
                /** @description Поисковый запрос для поиска по следующим полям: klp_code, smnn_code, ktru_code, name_trade, country, oksm_code, name_producer. */
                search?: string;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this Лекарственный препарат. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicineModel"];
                };
            };
        };
    };
    v0_patient_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Поисковая строка (разделение терминов пробелом) */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPatientList"];
                };
            };
        };
    };
    v0_patient_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patient"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Patient"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v0_patient_conditions_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPatientConditionList"];
                };
            };
        };
    };
    v0_patient_conditions_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientCondition"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientCondition"];
                };
            };
        };
    };
    v0_patient_conditions_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Состояние пациента. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientCondition"];
                };
            };
        };
    };
    v0_patient_conditions_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Состояние пациента. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatientCondition"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientCondition"];
                };
            };
        };
    };
    v0_patient_conditions_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Состояние пациента. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_patient_conditions_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Состояние пациента. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatientCondition"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PatientCondition"];
                };
            };
        };
    };
    v0_patient_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Пациент. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Patient"];
                };
            };
        };
    };
    v0_patient_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Пациент. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Patient"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Patient"];
                };
            };
        };
    };
    v0_patient_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Пациент. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v0_patient_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Пациент. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPatient"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Patient"];
                };
            };
        };
    };
    v0_permission_group_current_user_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_position_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedPositionList"];
                };
            };
        };
    };
    v0_position_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Position"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Position"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v0_position_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Должность. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Position"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v0_position_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Должность. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Position"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Position"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v0_position_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Должность. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    v0_position_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Должность. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPosition"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Position"];
                };
            };
        };
    };
    v0_reception_templates_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description A search term. */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedReceptionTemplateList"];
                };
            };
        };
    };
    v0_reception_templates_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceptionTemplate"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceptionTemplate"];
                };
            };
        };
    };
    v0_reception_templates_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Шаблон приема. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceptionTemplate"];
                };
            };
        };
    };
    v0_reception_templates_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Шаблон приема. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceptionTemplate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceptionTemplate"];
                };
            };
        };
    };
    v0_reception_templates_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Шаблон приема. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_reception_templates_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Шаблон приема. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedReceptionTemplate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceptionTemplate"];
                };
            };
        };
    };
    v0_reception_time_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedReceptionTimeList"];
                };
            };
        };
    };
    v0_reception_time_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReceptionTime"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceptionTime"];
                };
            };
        };
    };
    v0_reception_time_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Время приёма. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceptionTime"];
                };
            };
        };
    };
    v0_reception_time_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Время приёма. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_reception_time_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Время приёма. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedReceptionTime"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReceptionTime"];
                };
            };
        };
    };
    v0_register_new_employee_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistrationInput"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistrationOutput"];
                };
            };
        };
    };
    v0_shift_list: {
        parameters: {
            query?: {
                /** @description Конечная дата в формате YYYY-MM-DD */
                end_date?: string;
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
                /** @description Начальная дата в формате YYYY-MM-DD */
                start_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedShiftList"];
                };
            };
        };
    };
    v0_shift_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Shift"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Shift"];
                };
            };
        };
    };
    v0_shift_transfers_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedShiftTransferList"];
                };
            };
        };
    };
    v0_shift_transfers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShiftTransfer"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShiftTransfer"];
                };
            };
        };
    };
    v0_shift_transfers_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Передача врачебной смены. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShiftTransfer"];
                };
            };
        };
    };
    v0_shift_transfers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Передача врачебной смены. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShiftTransfer"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShiftTransfer"];
                };
            };
        };
    };
    v0_shift_transfers_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Передача врачебной смены. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_shift_transfers_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Передача врачебной смены. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedShiftTransfer"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShiftTransfer"];
                };
            };
        };
    };
    v0_shift_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Врачебная смена. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Shift"];
                };
            };
        };
    };
    v0_shift_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Врачебная смена. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Shift"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Shift"];
                };
            };
        };
    };
    v0_shift_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Врачебная смена. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_shift_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Врачебная смена. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedShift"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Shift"];
                };
            };
        };
    };
    v0_specialization_list: {
        parameters: {
            query?: {
                /** @description A page number within the paginated result set. */
                page?: number;
                /** @description Number of results to return per page. */
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSpecializationList"];
                };
            };
        };
    };
    v0_specialization_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Specialization"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialization"];
                };
            };
        };
    };
    v0_specialization_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Специализация врача. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialization"];
                };
            };
        };
    };
    v0_specialization_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Специализация врача. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Specialization"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialization"];
                };
            };
        };
    };
    v0_specialization_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Специализация врача. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_specialization_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this Специализация врача. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSpecialization"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Specialization"];
                };
            };
        };
    };
    v0_users_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    v0_users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    v0_users_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this пользователь. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    v0_users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this пользователь. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    v0_users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this пользователь. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    v0_users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this пользователь. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
}
